!---+----1----+----2----+----3----+----4----+----5----+----6----+----7--
! This module has been derived from a mass_balances.F automagically
! generated by CREATE_MASS_BALANCES from the MEDUSA configuration
! utility medusa-cocogen.
!
! During the generation, approximate PO4 balance terms were added by
!  - including <PO4> om_p</PO4> in the <ConservationProperties>
!    of src-mcg/xml/orgm.xml;
!  - having O2 "carry" (negative) PO4 by including
!    <PO4> -om_p/om_remin_o2</PO4> in the <ConservationProperties>
!    of src-mcg/xml/o2.xml;
!  - manually fixing a few missing things that were not automatically
!    generated.
!
!---+----1----+----2----+----3----+----4----+----5----+----6----+----7--
#ifdef FN_THISFILE
#undef FN_THISFILE
#endif
#define FN_THISFILE "mass_balances.F"
#ifndef __LINE__
#define __LINE__ 0
#endif
!***********************************************************************
      SUBROUTINE MASS_BALANCES(total_xm_0, total_xm_1,
     &                         topflx_xm_01, botflx_xm_01,
     &                         total_rea_xm_01,
     &                         n_columns)
!***********************************************************************

! Calculates the mass-balances for individual species in the different
! components of the sediment (including alkalinity).
! The results are printed out to STDLOG.


!       ***************************************************
!       ***                                             ***
!       ***  THIS MODULE CURRENTLY REQUIRES EXTRA CARE  ***
!       ***      WITH NON-UNIFORM REDFIELD RATIOS!      ***
!       ***                                             ***
!       ***************************************************


!-----------------------------------------------------------------------
! Modules used
!-----------------------------------------------------------------------

      USE mod_defines_medusa
      USE mod_indexparam
      USE mod_materialcharas

      USE mod_seafloor_central, ONLY: COLUMN_AREA4N, GET_MATERIALCHARAS


!-----------------------------------------------------------------------
! Variable declarations
!-----------------------------------------------------------------------

      IMPLICIT NONE

!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! General (global) parameters
!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

!     NONE


!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! Variables in subroutine call arguments
!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      INTEGER, INTENT(IN) :: n_columns
      DOUBLE PRECISION, DIMENSION(ncompo,n_columns), INTENT(IN) ::
     &   total_xm_0,      ! total masses at t=0
     &   total_xm_1,      ! total masses at t=1
     &   topflx_xm_01,    ! total top (input) flux during [t_0,t_1]
     &   botflx_xm_01,    ! total bottom (output) flux during [t_0,t_1]
     &   total_rea_xm_01  ! total reaction rate during [t_0,t_1]

! 'top' stands here for the uppermost extension of the modelled sediment,
! i.e., the 'w' interface if it exists, or else the 't' interface
!
! Units:
! - [mol/m2_bulk_sediment] for solutes
! - [kg/m2_bulk_sediment] for solids
!
! topflx and botflx are integrated fluxes over the time interval [t_0,t_1];
! total_rea is the reaction rate, integrated over the column and over
! the time interval [t_0,t_1].


!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! Local variables
!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      CHARACTER(LEN=*), PARAMETER :: fmta='(A)'
      CHARACTER(LEN=*), PARAMETER :: fmt1='(A,EN25.15)'
      CHARACTER(LEN=*), PARAMETER :: fmtl='(A,25("-"))'
      CHARACTER(LEN=*), PARAMETER :: fmt2='(A,EN25.15,2X,"[",E10.3,"]")'
      CHARACTER(LEN=*), PARAMETER :: fmt3='(A,EN25.15,2X,EN25.15)'


      INTEGER :: i_column, io
      INTEGER :: icompo
      INTEGER :: iflag

      DOUBLE PRECISION, DIMENSION(ncompo) :: column_residual
      DOUBLE PRECISION, DIMENSION(ncompo) :: column_rea
      DOUBLE PRECISION, DIMENSION(ncompo) :: column_xm_0
      DOUBLE PRECISION, DIMENSION(ncompo) :: column_xm_1
      DOUBLE PRECISION, DIMENSION(ncompo) :: column_woflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: column_boflx

      DOUBLE PRECISION, DIMENSION(ncompo) :: max_residual

      DOUBLE PRECISION, DIMENSION(ncompo) :: global_residual
      DOUBLE PRECISION, DIMENSION(ncompo) :: global_rea
      DOUBLE PRECISION, DIMENSION(ncompo) :: global_xm_0
      DOUBLE PRECISION, DIMENSION(ncompo) :: global_xm_1
      DOUBLE PRECISION, DIMENSION(ncompo) :: global_woflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: global_boflx

      DOUBLE PRECISION                    :: sfc_area

      DOUBLE PRECISION                    :: net, del, ref



!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_1.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! [[CMB_createDeclareAndInit]]: Start of creation


! Variables related to the conservation properties
! ================================================

! Variable name construction
! --------------------------
! c_*      : in the current column
! g_*      : globally integrated
! m_*      : maximum over all columns
! *_rea  : reaction rate (production-minus-destruction)
! *_woflx: flux across the water-DBL interface (positive downwards)
! *_boflx: flux across the sediment bottom (positive downwards)


! Local variables related to alkalinity
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      DOUBLE PRECISION, DIMENSION(ncompo) :: c_alk_xm_0
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_alk_xm_1
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_alk_woflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_alk_boflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_alk_rea
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_alk_resid

      DOUBLE PRECISION, DIMENSION(ncompo) :: g_alk_xm_0
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_alk_xm_1
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_alk_woflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_alk_boflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_alk_rea
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_alk_resid

      DOUBLE PRECISION, DIMENSION(ncompo) :: m_alk_resid


! *_bulk_total_alk : alkalinity in "bulk:total"

      DOUBLE PRECISION :: c_alk_bulk_total_xm_0
      DOUBLE PRECISION :: c_alk_bulk_total_xm_1

      DOUBLE PRECISION :: c_alk_bulk_total_woflx
      DOUBLE PRECISION :: c_alk_bulk_total_boflx
      DOUBLE PRECISION :: c_alk_bulk_total_rea
      DOUBLE PRECISION :: c_alk_bulk_total_resid

      DOUBLE PRECISION :: g_alk_bulk_total_xm_0
      DOUBLE PRECISION :: g_alk_bulk_total_xm_1

      DOUBLE PRECISION :: g_alk_bulk_total_woflx
      DOUBLE PRECISION :: g_alk_bulk_total_boflx
      DOUBLE PRECISION :: g_alk_bulk_total_rea
      DOUBLE PRECISION :: g_alk_bulk_total_resid

      DOUBLE PRECISION :: m_alk_bulk_total_resid


! *_bulk_porew_alk : alkalinity in "bulk:porew"

      DOUBLE PRECISION :: c_alk_bulk_porew_xm_0
      DOUBLE PRECISION :: c_alk_bulk_porew_xm_1

      DOUBLE PRECISION :: c_alk_bulk_porew_woflx
      DOUBLE PRECISION :: c_alk_bulk_porew_boflx
      DOUBLE PRECISION :: c_alk_bulk_porew_rea
      DOUBLE PRECISION :: c_alk_bulk_porew_resid

      DOUBLE PRECISION :: g_alk_bulk_porew_xm_0
      DOUBLE PRECISION :: g_alk_bulk_porew_xm_1

      DOUBLE PRECISION :: g_alk_bulk_porew_woflx
      DOUBLE PRECISION :: g_alk_bulk_porew_boflx
      DOUBLE PRECISION :: g_alk_bulk_porew_rea
      DOUBLE PRECISION :: g_alk_bulk_porew_resid

      DOUBLE PRECISION :: m_alk_bulk_porew_resid


! *_bulk_solid_alk : alkalinity in "bulk:solid"

      DOUBLE PRECISION :: c_alk_bulk_solid_xm_0
      DOUBLE PRECISION :: c_alk_bulk_solid_xm_1

      DOUBLE PRECISION :: c_alk_bulk_solid_woflx
      DOUBLE PRECISION :: c_alk_bulk_solid_boflx
      DOUBLE PRECISION :: c_alk_bulk_solid_rea
      DOUBLE PRECISION :: c_alk_bulk_solid_resid

      DOUBLE PRECISION :: g_alk_bulk_solid_xm_0
      DOUBLE PRECISION :: g_alk_bulk_solid_xm_1

      DOUBLE PRECISION :: g_alk_bulk_solid_woflx
      DOUBLE PRECISION :: g_alk_bulk_solid_boflx
      DOUBLE PRECISION :: g_alk_bulk_solid_rea
      DOUBLE PRECISION :: g_alk_bulk_solid_resid

      DOUBLE PRECISION :: m_alk_bulk_solid_resid


! *_orgm_total_alk : alkalinity in "orgm:total"

      DOUBLE PRECISION :: c_alk_orgm_total_xm_0
      DOUBLE PRECISION :: c_alk_orgm_total_xm_1

      DOUBLE PRECISION :: c_alk_orgm_total_woflx
      DOUBLE PRECISION :: c_alk_orgm_total_boflx
      DOUBLE PRECISION :: c_alk_orgm_total_rea
      DOUBLE PRECISION :: c_alk_orgm_total_resid

      DOUBLE PRECISION :: g_alk_orgm_total_xm_0
      DOUBLE PRECISION :: g_alk_orgm_total_xm_1

      DOUBLE PRECISION :: g_alk_orgm_total_woflx
      DOUBLE PRECISION :: g_alk_orgm_total_boflx
      DOUBLE PRECISION :: g_alk_orgm_total_rea
      DOUBLE PRECISION :: g_alk_orgm_total_resid

      DOUBLE PRECISION :: m_alk_orgm_total_resid


! *_orgm_cnp_alk : alkalinity in "orgm:cnp"

      DOUBLE PRECISION :: c_alk_orgm_cnp_xm_0
      DOUBLE PRECISION :: c_alk_orgm_cnp_xm_1

      DOUBLE PRECISION :: c_alk_orgm_cnp_woflx
      DOUBLE PRECISION :: c_alk_orgm_cnp_boflx
      DOUBLE PRECISION :: c_alk_orgm_cnp_rea
      DOUBLE PRECISION :: c_alk_orgm_cnp_resid

      DOUBLE PRECISION :: g_alk_orgm_cnp_xm_0
      DOUBLE PRECISION :: g_alk_orgm_cnp_xm_1

      DOUBLE PRECISION :: g_alk_orgm_cnp_woflx
      DOUBLE PRECISION :: g_alk_orgm_cnp_boflx
      DOUBLE PRECISION :: g_alk_orgm_cnp_rea
      DOUBLE PRECISION :: g_alk_orgm_cnp_resid

      DOUBLE PRECISION :: m_alk_orgm_cnp_resid



! Local variables related to carbon
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      DOUBLE PRECISION, DIMENSION(ncompo) :: c_c_xm_0
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_c_xm_1
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_c_woflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_c_boflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_c_rea
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_c_resid

      DOUBLE PRECISION, DIMENSION(ncompo) :: g_c_xm_0
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_c_xm_1
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_c_woflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_c_boflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_c_rea
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_c_resid

      DOUBLE PRECISION, DIMENSION(ncompo) :: m_c_resid


! *_bulk_total_c : carbon in "bulk:total"

      DOUBLE PRECISION :: c_c_bulk_total_xm_0
      DOUBLE PRECISION :: c_c_bulk_total_xm_1

      DOUBLE PRECISION :: c_c_bulk_total_woflx
      DOUBLE PRECISION :: c_c_bulk_total_boflx
      DOUBLE PRECISION :: c_c_bulk_total_rea
      DOUBLE PRECISION :: c_c_bulk_total_resid

      DOUBLE PRECISION :: g_c_bulk_total_xm_0
      DOUBLE PRECISION :: g_c_bulk_total_xm_1

      DOUBLE PRECISION :: g_c_bulk_total_woflx
      DOUBLE PRECISION :: g_c_bulk_total_boflx
      DOUBLE PRECISION :: g_c_bulk_total_rea
      DOUBLE PRECISION :: g_c_bulk_total_resid

      DOUBLE PRECISION :: m_c_bulk_total_resid


! *_bulk_porew_c : carbon in "bulk:porew"

      DOUBLE PRECISION :: c_c_bulk_porew_xm_0
      DOUBLE PRECISION :: c_c_bulk_porew_xm_1

      DOUBLE PRECISION :: c_c_bulk_porew_woflx
      DOUBLE PRECISION :: c_c_bulk_porew_boflx
      DOUBLE PRECISION :: c_c_bulk_porew_rea
      DOUBLE PRECISION :: c_c_bulk_porew_resid

      DOUBLE PRECISION :: g_c_bulk_porew_xm_0
      DOUBLE PRECISION :: g_c_bulk_porew_xm_1

      DOUBLE PRECISION :: g_c_bulk_porew_woflx
      DOUBLE PRECISION :: g_c_bulk_porew_boflx
      DOUBLE PRECISION :: g_c_bulk_porew_rea
      DOUBLE PRECISION :: g_c_bulk_porew_resid

      DOUBLE PRECISION :: m_c_bulk_porew_resid


! *_bulk_solid_c : carbon in "bulk:solid"

      DOUBLE PRECISION :: c_c_bulk_solid_xm_0
      DOUBLE PRECISION :: c_c_bulk_solid_xm_1

      DOUBLE PRECISION :: c_c_bulk_solid_woflx
      DOUBLE PRECISION :: c_c_bulk_solid_boflx
      DOUBLE PRECISION :: c_c_bulk_solid_rea
      DOUBLE PRECISION :: c_c_bulk_solid_resid

      DOUBLE PRECISION :: g_c_bulk_solid_xm_0
      DOUBLE PRECISION :: g_c_bulk_solid_xm_1

      DOUBLE PRECISION :: g_c_bulk_solid_woflx
      DOUBLE PRECISION :: g_c_bulk_solid_boflx
      DOUBLE PRECISION :: g_c_bulk_solid_rea
      DOUBLE PRECISION :: g_c_bulk_solid_resid

      DOUBLE PRECISION :: m_c_bulk_solid_resid


! *_orgm_total_c : carbon in "orgm:total"

      DOUBLE PRECISION :: c_c_orgm_total_xm_0
      DOUBLE PRECISION :: c_c_orgm_total_xm_1

      DOUBLE PRECISION :: c_c_orgm_total_woflx
      DOUBLE PRECISION :: c_c_orgm_total_boflx
      DOUBLE PRECISION :: c_c_orgm_total_rea
      DOUBLE PRECISION :: c_c_orgm_total_resid

      DOUBLE PRECISION :: g_c_orgm_total_xm_0
      DOUBLE PRECISION :: g_c_orgm_total_xm_1

      DOUBLE PRECISION :: g_c_orgm_total_woflx
      DOUBLE PRECISION :: g_c_orgm_total_boflx
      DOUBLE PRECISION :: g_c_orgm_total_rea
      DOUBLE PRECISION :: g_c_orgm_total_resid

      DOUBLE PRECISION :: m_c_orgm_total_resid


! *_orgm_cnp_c : carbon in "orgm:cnp"

      DOUBLE PRECISION :: c_c_orgm_cnp_xm_0
      DOUBLE PRECISION :: c_c_orgm_cnp_xm_1

      DOUBLE PRECISION :: c_c_orgm_cnp_woflx
      DOUBLE PRECISION :: c_c_orgm_cnp_boflx
      DOUBLE PRECISION :: c_c_orgm_cnp_rea
      DOUBLE PRECISION :: c_c_orgm_cnp_resid

      DOUBLE PRECISION :: g_c_orgm_cnp_xm_0
      DOUBLE PRECISION :: g_c_orgm_cnp_xm_1

      DOUBLE PRECISION :: g_c_orgm_cnp_woflx
      DOUBLE PRECISION :: g_c_orgm_cnp_boflx
      DOUBLE PRECISION :: g_c_orgm_cnp_rea
      DOUBLE PRECISION :: g_c_orgm_cnp_resid

      DOUBLE PRECISION :: m_c_orgm_cnp_resid



! Local variables related to oxygen
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      DOUBLE PRECISION, DIMENSION(ncompo) :: c_o2_xm_0
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_o2_xm_1
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_o2_woflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_o2_boflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_o2_rea
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_o2_resid

      DOUBLE PRECISION, DIMENSION(ncompo) :: g_o2_xm_0
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_o2_xm_1
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_o2_woflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_o2_boflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_o2_rea
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_o2_resid

      DOUBLE PRECISION, DIMENSION(ncompo) :: m_o2_resid


! *_bulk_total_o2 : oxygen in "bulk:total"

      DOUBLE PRECISION :: c_o2_bulk_total_xm_0
      DOUBLE PRECISION :: c_o2_bulk_total_xm_1

      DOUBLE PRECISION :: c_o2_bulk_total_woflx
      DOUBLE PRECISION :: c_o2_bulk_total_boflx
      DOUBLE PRECISION :: c_o2_bulk_total_rea
      DOUBLE PRECISION :: c_o2_bulk_total_resid

      DOUBLE PRECISION :: g_o2_bulk_total_xm_0
      DOUBLE PRECISION :: g_o2_bulk_total_xm_1

      DOUBLE PRECISION :: g_o2_bulk_total_woflx
      DOUBLE PRECISION :: g_o2_bulk_total_boflx
      DOUBLE PRECISION :: g_o2_bulk_total_rea
      DOUBLE PRECISION :: g_o2_bulk_total_resid

      DOUBLE PRECISION :: m_o2_bulk_total_resid


! *_bulk_porew_o2 : oxygen in "bulk:porew"

      DOUBLE PRECISION :: c_o2_bulk_porew_xm_0
      DOUBLE PRECISION :: c_o2_bulk_porew_xm_1

      DOUBLE PRECISION :: c_o2_bulk_porew_woflx
      DOUBLE PRECISION :: c_o2_bulk_porew_boflx
      DOUBLE PRECISION :: c_o2_bulk_porew_rea
      DOUBLE PRECISION :: c_o2_bulk_porew_resid

      DOUBLE PRECISION :: g_o2_bulk_porew_xm_0
      DOUBLE PRECISION :: g_o2_bulk_porew_xm_1

      DOUBLE PRECISION :: g_o2_bulk_porew_woflx
      DOUBLE PRECISION :: g_o2_bulk_porew_boflx
      DOUBLE PRECISION :: g_o2_bulk_porew_rea
      DOUBLE PRECISION :: g_o2_bulk_porew_resid

      DOUBLE PRECISION :: m_o2_bulk_porew_resid


! *_bulk_solid_o2 : oxygen in "bulk:solid"

      DOUBLE PRECISION :: c_o2_bulk_solid_xm_0
      DOUBLE PRECISION :: c_o2_bulk_solid_xm_1

      DOUBLE PRECISION :: c_o2_bulk_solid_woflx
      DOUBLE PRECISION :: c_o2_bulk_solid_boflx
      DOUBLE PRECISION :: c_o2_bulk_solid_rea
      DOUBLE PRECISION :: c_o2_bulk_solid_resid

      DOUBLE PRECISION :: g_o2_bulk_solid_xm_0
      DOUBLE PRECISION :: g_o2_bulk_solid_xm_1

      DOUBLE PRECISION :: g_o2_bulk_solid_woflx
      DOUBLE PRECISION :: g_o2_bulk_solid_boflx
      DOUBLE PRECISION :: g_o2_bulk_solid_rea
      DOUBLE PRECISION :: g_o2_bulk_solid_resid

      DOUBLE PRECISION :: m_o2_bulk_solid_resid


! *_orgm_total_o2 : oxygen in "orgm:total"

      DOUBLE PRECISION :: c_o2_orgm_total_xm_0
      DOUBLE PRECISION :: c_o2_orgm_total_xm_1

      DOUBLE PRECISION :: c_o2_orgm_total_woflx
      DOUBLE PRECISION :: c_o2_orgm_total_boflx
      DOUBLE PRECISION :: c_o2_orgm_total_rea
      DOUBLE PRECISION :: c_o2_orgm_total_resid

      DOUBLE PRECISION :: g_o2_orgm_total_xm_0
      DOUBLE PRECISION :: g_o2_orgm_total_xm_1

      DOUBLE PRECISION :: g_o2_orgm_total_woflx
      DOUBLE PRECISION :: g_o2_orgm_total_boflx
      DOUBLE PRECISION :: g_o2_orgm_total_rea
      DOUBLE PRECISION :: g_o2_orgm_total_resid

      DOUBLE PRECISION :: m_o2_orgm_total_resid


! *_orgm_cnp_o2 : oxygen in "orgm:cnp"

      DOUBLE PRECISION :: c_o2_orgm_cnp_xm_0
      DOUBLE PRECISION :: c_o2_orgm_cnp_xm_1

      DOUBLE PRECISION :: c_o2_orgm_cnp_woflx
      DOUBLE PRECISION :: c_o2_orgm_cnp_boflx
      DOUBLE PRECISION :: c_o2_orgm_cnp_rea
      DOUBLE PRECISION :: c_o2_orgm_cnp_resid

      DOUBLE PRECISION :: g_o2_orgm_cnp_xm_0
      DOUBLE PRECISION :: g_o2_orgm_cnp_xm_1

      DOUBLE PRECISION :: g_o2_orgm_cnp_woflx
      DOUBLE PRECISION :: g_o2_orgm_cnp_boflx
      DOUBLE PRECISION :: g_o2_orgm_cnp_rea
      DOUBLE PRECISION :: g_o2_orgm_cnp_resid

      DOUBLE PRECISION :: m_o2_orgm_cnp_resid



! Local variables related to phosphate
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      DOUBLE PRECISION, DIMENSION(ncompo) :: c_po4_xm_0
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_po4_xm_1
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_po4_woflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_po4_boflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_po4_rea
      DOUBLE PRECISION, DIMENSION(ncompo) :: c_po4_resid

      DOUBLE PRECISION, DIMENSION(ncompo) :: g_po4_xm_0
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_po4_xm_1
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_po4_woflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_po4_boflx
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_po4_rea
      DOUBLE PRECISION, DIMENSION(ncompo) :: g_po4_resid

      DOUBLE PRECISION, DIMENSION(ncompo) :: m_po4_resid


! *_bulk_total_po4 : phosphate in "bulk:total"

      DOUBLE PRECISION :: c_po4_bulk_total_xm_0
      DOUBLE PRECISION :: c_po4_bulk_total_xm_1

      DOUBLE PRECISION :: c_po4_bulk_total_woflx
      DOUBLE PRECISION :: c_po4_bulk_total_boflx
      DOUBLE PRECISION :: c_po4_bulk_total_rea
      DOUBLE PRECISION :: c_po4_bulk_total_resid

      DOUBLE PRECISION :: g_po4_bulk_total_xm_0
      DOUBLE PRECISION :: g_po4_bulk_total_xm_1

      DOUBLE PRECISION :: g_po4_bulk_total_woflx
      DOUBLE PRECISION :: g_po4_bulk_total_boflx
      DOUBLE PRECISION :: g_po4_bulk_total_rea
      DOUBLE PRECISION :: g_po4_bulk_total_resid

      DOUBLE PRECISION :: m_po4_bulk_total_resid


! *_bulk_porew_po4 : phosphate in "bulk:porew"

      DOUBLE PRECISION :: c_po4_bulk_porew_xm_0
      DOUBLE PRECISION :: c_po4_bulk_porew_xm_1

      DOUBLE PRECISION :: c_po4_bulk_porew_woflx
      DOUBLE PRECISION :: c_po4_bulk_porew_boflx
      DOUBLE PRECISION :: c_po4_bulk_porew_rea
      DOUBLE PRECISION :: c_po4_bulk_porew_resid

      DOUBLE PRECISION :: g_po4_bulk_porew_xm_0
      DOUBLE PRECISION :: g_po4_bulk_porew_xm_1

      DOUBLE PRECISION :: g_po4_bulk_porew_woflx
      DOUBLE PRECISION :: g_po4_bulk_porew_boflx
      DOUBLE PRECISION :: g_po4_bulk_porew_rea
      DOUBLE PRECISION :: g_po4_bulk_porew_resid

      DOUBLE PRECISION :: m_po4_bulk_porew_resid


! *_bulk_solid_po4 : phosphate in "bulk:solid"

      DOUBLE PRECISION :: c_po4_bulk_solid_xm_0
      DOUBLE PRECISION :: c_po4_bulk_solid_xm_1

      DOUBLE PRECISION :: c_po4_bulk_solid_woflx
      DOUBLE PRECISION :: c_po4_bulk_solid_boflx
      DOUBLE PRECISION :: c_po4_bulk_solid_rea
      DOUBLE PRECISION :: c_po4_bulk_solid_resid

      DOUBLE PRECISION :: g_po4_bulk_solid_xm_0
      DOUBLE PRECISION :: g_po4_bulk_solid_xm_1

      DOUBLE PRECISION :: g_po4_bulk_solid_woflx
      DOUBLE PRECISION :: g_po4_bulk_solid_boflx
      DOUBLE PRECISION :: g_po4_bulk_solid_rea
      DOUBLE PRECISION :: g_po4_bulk_solid_resid

      DOUBLE PRECISION :: m_po4_bulk_solid_resid


! *_orgm_total_po4 : phosphate in "orgm:total"

      DOUBLE PRECISION :: c_po4_orgm_total_xm_0
      DOUBLE PRECISION :: c_po4_orgm_total_xm_1

      DOUBLE PRECISION :: c_po4_orgm_total_woflx
      DOUBLE PRECISION :: c_po4_orgm_total_boflx
      DOUBLE PRECISION :: c_po4_orgm_total_rea
      DOUBLE PRECISION :: c_po4_orgm_total_resid

      DOUBLE PRECISION :: g_po4_orgm_total_xm_0
      DOUBLE PRECISION :: g_po4_orgm_total_xm_1

      DOUBLE PRECISION :: g_po4_orgm_total_woflx
      DOUBLE PRECISION :: g_po4_orgm_total_boflx
      DOUBLE PRECISION :: g_po4_orgm_total_rea
      DOUBLE PRECISION :: g_po4_orgm_total_resid

      DOUBLE PRECISION :: m_po4_orgm_total_resid


! *_orgm_cnp_po4 : phosphate in "orgm:cnp"

      DOUBLE PRECISION :: c_po4_orgm_cnp_xm_0
      DOUBLE PRECISION :: c_po4_orgm_cnp_xm_1

      DOUBLE PRECISION :: c_po4_orgm_cnp_woflx
      DOUBLE PRECISION :: c_po4_orgm_cnp_boflx
      DOUBLE PRECISION :: c_po4_orgm_cnp_rea
      DOUBLE PRECISION :: c_po4_orgm_cnp_resid

      DOUBLE PRECISION :: g_po4_orgm_cnp_xm_0
      DOUBLE PRECISION :: g_po4_orgm_cnp_xm_1

      DOUBLE PRECISION :: g_po4_orgm_cnp_woflx
      DOUBLE PRECISION :: g_po4_orgm_cnp_boflx
      DOUBLE PRECISION :: g_po4_orgm_cnp_rea
      DOUBLE PRECISION :: g_po4_orgm_cnp_resid

      DOUBLE PRECISION :: m_po4_orgm_cnp_resid



! [[CMB_createDeclareAndInit]]: End of creation
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_1.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

!-----------------------------------------------------------------------
! End of declarations
!-----------------------------------------------------------------------



!-----------------------------------------------------------------------
! Subroutine Start
!-----------------------------------------------------------------------

         max_residual(:) = 0D0

      global_residual(:) = 0D0
      global_rea(:)      = 0D0
      global_woflx(:)    = 0D0
      global_boflx(:)    = 0D0
      global_xm_0(:)     = 0D0
      global_xm_1(:)     = 0D0


!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_2.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! [[CMB_createDeclareAndInit]]: Start of creation

      g_alk_xm_0(:)     = 0D0
      g_alk_xm_1(:)     = 0D0

      g_alk_woflx(:)    = 0D0
      g_alk_boflx(:)    = 0D0
      g_alk_rea(:)      = 0D0
      g_alk_resid(:)    = 0D0

      m_alk_resid(:)    = 0D0


      g_alk_bulk_total_xm_0      = 0D0
      g_alk_bulk_total_xm_1      = 0D0

      g_alk_bulk_total_woflx     = 0D0
      g_alk_bulk_total_boflx     = 0D0
      g_alk_bulk_total_rea       = 0D0
      g_alk_bulk_total_resid     = 0D0

      m_alk_bulk_total_resid     = 0D0


      g_alk_bulk_porew_xm_0      = 0D0
      g_alk_bulk_porew_xm_1      = 0D0

      g_alk_bulk_porew_woflx     = 0D0
      g_alk_bulk_porew_boflx     = 0D0
      g_alk_bulk_porew_rea       = 0D0
      g_alk_bulk_porew_resid     = 0D0

      m_alk_bulk_porew_resid     = 0D0


      g_alk_bulk_solid_xm_0      = 0D0
      g_alk_bulk_solid_xm_1      = 0D0

      g_alk_bulk_solid_woflx     = 0D0
      g_alk_bulk_solid_boflx     = 0D0
      g_alk_bulk_solid_rea       = 0D0
      g_alk_bulk_solid_resid     = 0D0

      m_alk_bulk_solid_resid     = 0D0


      g_alk_orgm_total_xm_0      = 0D0
      g_alk_orgm_total_xm_1      = 0D0

      g_alk_orgm_total_woflx     = 0D0
      g_alk_orgm_total_boflx     = 0D0
      g_alk_orgm_total_rea       = 0D0
      g_alk_orgm_total_resid     = 0D0

      m_alk_orgm_total_resid     = 0D0


      g_alk_orgm_cnp_xm_0      = 0D0
      g_alk_orgm_cnp_xm_1      = 0D0

      g_alk_orgm_cnp_woflx     = 0D0
      g_alk_orgm_cnp_boflx     = 0D0
      g_alk_orgm_cnp_rea       = 0D0
      g_alk_orgm_cnp_resid     = 0D0

      m_alk_orgm_cnp_resid     = 0D0




      g_c_xm_0(:)     = 0D0
      g_c_xm_1(:)     = 0D0

      g_c_woflx(:)    = 0D0
      g_c_boflx(:)    = 0D0
      g_c_rea(:)      = 0D0
      g_c_resid(:)    = 0D0

      m_c_resid(:)    = 0D0


      g_c_bulk_total_xm_0      = 0D0
      g_c_bulk_total_xm_1      = 0D0

      g_c_bulk_total_woflx     = 0D0
      g_c_bulk_total_boflx     = 0D0
      g_c_bulk_total_rea       = 0D0
      g_c_bulk_total_resid     = 0D0

      m_c_bulk_total_resid     = 0D0


      g_c_bulk_porew_xm_0      = 0D0
      g_c_bulk_porew_xm_1      = 0D0

      g_c_bulk_porew_woflx     = 0D0
      g_c_bulk_porew_boflx     = 0D0
      g_c_bulk_porew_rea       = 0D0
      g_c_bulk_porew_resid     = 0D0

      m_c_bulk_porew_resid     = 0D0


      g_c_bulk_solid_xm_0      = 0D0
      g_c_bulk_solid_xm_1      = 0D0

      g_c_bulk_solid_woflx     = 0D0
      g_c_bulk_solid_boflx     = 0D0
      g_c_bulk_solid_rea       = 0D0
      g_c_bulk_solid_resid     = 0D0

      m_c_bulk_solid_resid     = 0D0


      g_c_orgm_total_xm_0      = 0D0
      g_c_orgm_total_xm_1      = 0D0

      g_c_orgm_total_woflx     = 0D0
      g_c_orgm_total_boflx     = 0D0
      g_c_orgm_total_rea       = 0D0
      g_c_orgm_total_resid     = 0D0

      m_c_orgm_total_resid     = 0D0


      g_c_orgm_cnp_xm_0      = 0D0
      g_c_orgm_cnp_xm_1      = 0D0

      g_c_orgm_cnp_woflx     = 0D0
      g_c_orgm_cnp_boflx     = 0D0
      g_c_orgm_cnp_rea       = 0D0
      g_c_orgm_cnp_resid     = 0D0

      m_c_orgm_cnp_resid     = 0D0




      g_o2_xm_0(:)     = 0D0
      g_o2_xm_1(:)     = 0D0

      g_o2_woflx(:)    = 0D0
      g_o2_boflx(:)    = 0D0
      g_o2_rea(:)      = 0D0
      g_o2_resid(:)    = 0D0

      m_o2_resid(:)    = 0D0


      g_o2_bulk_total_xm_0      = 0D0
      g_o2_bulk_total_xm_1      = 0D0

      g_o2_bulk_total_woflx     = 0D0
      g_o2_bulk_total_boflx     = 0D0
      g_o2_bulk_total_rea       = 0D0
      g_o2_bulk_total_resid     = 0D0

      m_o2_bulk_total_resid     = 0D0


      g_o2_bulk_porew_xm_0      = 0D0
      g_o2_bulk_porew_xm_1      = 0D0

      g_o2_bulk_porew_woflx     = 0D0
      g_o2_bulk_porew_boflx     = 0D0
      g_o2_bulk_porew_rea       = 0D0
      g_o2_bulk_porew_resid     = 0D0

      m_o2_bulk_porew_resid     = 0D0


      g_o2_bulk_solid_xm_0      = 0D0
      g_o2_bulk_solid_xm_1      = 0D0

      g_o2_bulk_solid_woflx     = 0D0
      g_o2_bulk_solid_boflx     = 0D0
      g_o2_bulk_solid_rea       = 0D0
      g_o2_bulk_solid_resid     = 0D0

      m_o2_bulk_solid_resid     = 0D0


      g_o2_orgm_total_xm_0      = 0D0
      g_o2_orgm_total_xm_1      = 0D0

      g_o2_orgm_total_woflx     = 0D0
      g_o2_orgm_total_boflx     = 0D0
      g_o2_orgm_total_rea       = 0D0
      g_o2_orgm_total_resid     = 0D0

      m_o2_orgm_total_resid     = 0D0


      g_o2_orgm_cnp_xm_0      = 0D0
      g_o2_orgm_cnp_xm_1      = 0D0

      g_o2_orgm_cnp_woflx     = 0D0
      g_o2_orgm_cnp_boflx     = 0D0
      g_o2_orgm_cnp_rea       = 0D0
      g_o2_orgm_cnp_resid     = 0D0

      m_o2_orgm_cnp_resid     = 0D0




      g_po4_xm_0(:)     = 0D0
      g_po4_xm_1(:)     = 0D0

      g_po4_woflx(:)    = 0D0
      g_po4_boflx(:)    = 0D0
      g_po4_rea(:)      = 0D0
      g_po4_resid(:)    = 0D0

      m_po4_resid(:)    = 0D0


      g_po4_bulk_total_xm_0      = 0D0
      g_po4_bulk_total_xm_1      = 0D0

      g_po4_bulk_total_woflx     = 0D0
      g_po4_bulk_total_boflx     = 0D0
      g_po4_bulk_total_rea       = 0D0
      g_po4_bulk_total_resid     = 0D0

      m_po4_bulk_total_resid     = 0D0


      g_po4_bulk_porew_xm_0      = 0D0
      g_po4_bulk_porew_xm_1      = 0D0

      g_po4_bulk_porew_woflx     = 0D0
      g_po4_bulk_porew_boflx     = 0D0
      g_po4_bulk_porew_rea       = 0D0
      g_po4_bulk_porew_resid     = 0D0

      m_po4_bulk_porew_resid     = 0D0


      g_po4_bulk_solid_xm_0      = 0D0
      g_po4_bulk_solid_xm_1      = 0D0

      g_po4_bulk_solid_woflx     = 0D0
      g_po4_bulk_solid_boflx     = 0D0
      g_po4_bulk_solid_rea       = 0D0
      g_po4_bulk_solid_resid     = 0D0

      m_po4_bulk_solid_resid     = 0D0


      g_po4_orgm_total_xm_0      = 0D0
      g_po4_orgm_total_xm_1      = 0D0

      g_po4_orgm_total_woflx     = 0D0
      g_po4_orgm_total_boflx     = 0D0
      g_po4_orgm_total_rea       = 0D0
      g_po4_orgm_total_resid     = 0D0

      m_po4_orgm_total_resid     = 0D0


      g_po4_orgm_cnp_xm_0      = 0D0
      g_po4_orgm_cnp_xm_1      = 0D0

      g_po4_orgm_cnp_woflx     = 0D0
      g_po4_orgm_cnp_boflx     = 0D0
      g_po4_orgm_cnp_rea       = 0D0
      g_po4_orgm_cnp_resid     = 0D0

      m_po4_orgm_cnp_resid     = 0D0



! [[CMB_createDeclareAndInit]]: End of creation
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_2.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! Individual element and model-Sigma related sums and figures
!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      DO i_column = 1, n_columns

        ! Get the integrated data for column <i_column>
        ! =============================================

                                    ! Load characteristic material para-
                                    ! meters for material in column
                                    ! <i_column> into MOD_MATERIALCHARAS
                                    ! (molar masses, Redfield ratios etc.)
        CALL GET_MATERIALCHARAS(i_column, iflag)

                                    ! Get surface area covered by column
                                    ! <i_column>.
        CALL COLUMN_AREA4N(i_column, iflag, sfc_area)



        ! Prepare local copies of the data
        ! ================================

!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_3.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! [[CMB_createPrepareWorkingData]]: Start of creation

! Create local working copies of the input data:
! ---------------------------------------------
!  1. initialize all the compoenents of the column*(:) arrays to 0;
!  2. copy the solutes' data as is (they are in mol)
!  3. copy the solids' data and convert units to moles
!  4. calculate column residuals
!  5. calculate maximum residuals

                                    ! 1. Initialize all to zero

      column_xm_1(:)  = 0D0
      column_xm_0(:)  = 0D0
      column_woflx(:) = 0D0
      column_boflx(:) = 0D0
      column_rea(:)   = 0D0

      max_residual(:) = 0D0


                                    ! 2. copy in solutes' data

       column_xm_0(jc_to_io(:)) =      total_xm_0(jc_to_io(:), i_column)
       column_xm_1(jc_to_io(:)) =      total_xm_1(jc_to_io(:), i_column)
      column_woflx(jc_to_io(:)) =    topflx_xm_01(jc_to_io(:), i_column)
      column_boflx(jc_to_io(:)) = 0D0  ! !!! Check if botflx_xm_01 is 0 for solutes or not !!!
        column_rea(jc_to_io(:)) = total_rea_xm_01(jc_to_io(:), i_column)


                                    ! 3. copy in and convert solids' data

      column_xm_1(io_clay)  =   total_xm_1(io_clay, i_column)/mol_clay
      column_xm_0(io_clay)  =   total_xm_0(io_clay, i_column)/mol_clay
      column_woflx(io_clay) =  topflx_xm_01(io_clay, i_column)/mol_clay
      column_boflx(io_clay) =  botflx_xm_01(io_clay, i_column)/mol_clay
      column_rea(io_clay)   = total_rea_xm_01(io_clay, i_column)/
     &      mol_clay

      column_xm_1(io_calc)  =   total_xm_1(io_calc, i_column)/mol_calc
      column_xm_0(io_calc)  =   total_xm_0(io_calc, i_column)/mol_calc
      column_woflx(io_calc) =  topflx_xm_01(io_calc, i_column)/mol_calc
      column_boflx(io_calc) =  botflx_xm_01(io_calc, i_column)/mol_calc
      column_rea(io_calc)   = total_rea_xm_01(io_calc, i_column)/
     &      mol_calc

      column_xm_1(io_om)  =   total_xm_1(io_om, i_column)/mol_om
      column_xm_0(io_om)  =   total_xm_0(io_om, i_column)/mol_om
      column_woflx(io_om) =  topflx_xm_01(io_om, i_column)/mol_om
      column_boflx(io_om) =  botflx_xm_01(io_om, i_column)/mol_om
      column_rea(io_om)   = total_rea_xm_01(io_om, i_column)/mol_om


                                    ! 4. column residuals

      column_residual(:)  =
     &  column_xm_1(:) - column_xm_0(:)
     &  - (column_woflx(:) - column_boflx(:)) - column_rea(:)


                                    ! 5. Maximum residuals

      DO icompo = 1, ncompo
        max_residual(icompo)  =
     &  MAX(max_residual(icompo), ABS(column_residual(icompo)))
      ENDDO


! [[CMB_createPrepareWorkingData]]: End of creation
! [[CMB_createSpreadResults]]: Start of creation


                                    ! Prepare (distribute, apply weights)
                                    ! variables related to "alk":
                                    ! --------------------------
                                    !  - c_alk_xm_0(:)
                                    !  - c_alk_xm_1(:)
                                    !  - c_alk_woflx(:)
                                    !  - c_alk_boflx(:)
                                    !  - c_alk_rea(:)
                                    !  - c_alk_resid(:)
                                    !  - m_alk_resid(:)


                                    ! First pre-set all to 0
      c_alk_xm_0(:)     = 0D0
      c_alk_xm_1(:)     = 0D0
      c_alk_woflx(:)    = 0D0
      c_alk_boflx(:)    = 0D0
      c_alk_rea(:)      = 0D0
      c_alk_resid(:)    = 0D0

                                    ! Copy in content from column_*
                                    ! and apply appropriate weights
      c_alk_xm_0(io_calc)  = column_xm_0(io_calc) *DBLE(2)
      c_alk_xm_1(io_calc)  = column_xm_1(io_calc) *DBLE(2)
      c_alk_woflx(io_calc) = column_woflx(io_calc)*DBLE(2)
      c_alk_boflx(io_calc) = column_boflx(io_calc)*DBLE(2)
      c_alk_rea(io_calc)   = column_rea(io_calc)  *DBLE(2)

      c_alk_xm_0(io_co3)  = column_xm_0(io_co3) *DBLE(2)
      c_alk_xm_1(io_co3)  = column_xm_1(io_co3) *DBLE(2)
      c_alk_woflx(io_co3) = column_woflx(io_co3)*DBLE(2)
      c_alk_boflx(io_co3) = column_boflx(io_co3)*DBLE(2)
      c_alk_rea(io_co3)   = column_rea(io_co3)  *DBLE(2)

      c_alk_xm_0(io_hco3)  = column_xm_0(io_hco3)
      c_alk_xm_1(io_hco3)  = column_xm_1(io_hco3)
      c_alk_woflx(io_hco3) = column_woflx(io_hco3)
      c_alk_boflx(io_hco3) = column_boflx(io_hco3)
      c_alk_rea(io_hco3)   = column_rea(io_hco3)

      c_alk_xm_0(io_om)  = column_xm_0(io_om) *DBLE((-om_n-om_p))
      c_alk_xm_1(io_om)  = column_xm_1(io_om) *DBLE((-om_n-om_p))
      c_alk_woflx(io_om) = column_woflx(io_om)*DBLE((-om_n-om_p))
      c_alk_boflx(io_om) = column_boflx(io_om)*DBLE((-om_n-om_p))
      c_alk_rea(io_om)   = column_rea(io_om)  *DBLE((-om_n-om_p))


                                    ! Column residuals
                                    ! ----------------

      c_alk_resid(:)
     &  =   c_alk_xm_1(:) - c_alk_xm_0(:)
     &    - (c_alk_woflx(:) - c_alk_boflx(:)) - c_alk_rea(:)


                                    ! Maximum residuals
                                    ! -----------------

      DO icompo = 1, ncompo
        m_alk_resid(icompo)
     &   = MAX(m_alk_resid(icompo), ABS(c_alk_resid(icompo)))
      ENDDO




                                    ! Prepare (distribute, apply weights)
                                    ! variables related to "C":
                                    ! ------------------------
                                    !  - c_c_xm_0(:)
                                    !  - c_c_xm_1(:)
                                    !  - c_c_woflx(:)
                                    !  - c_c_boflx(:)
                                    !  - c_c_rea(:)
                                    !  - c_c_resid(:)
                                    !  - m_c_resid(:)


                                    ! First pre-set all to 0
      c_c_xm_0(:)     = 0D0
      c_c_xm_1(:)     = 0D0
      c_c_woflx(:)    = 0D0
      c_c_boflx(:)    = 0D0
      c_c_rea(:)      = 0D0
      c_c_resid(:)    = 0D0

                                    ! Copy in content from column_*
                                    ! and apply appropriate weights
      c_c_xm_0(io_calc)  = column_xm_0(io_calc)
      c_c_xm_1(io_calc)  = column_xm_1(io_calc)
      c_c_woflx(io_calc) = column_woflx(io_calc)
      c_c_boflx(io_calc) = column_boflx(io_calc)
      c_c_rea(io_calc)   = column_rea(io_calc)

      c_c_xm_0(io_co3)  = column_xm_0(io_co3)
      c_c_xm_1(io_co3)  = column_xm_1(io_co3)
      c_c_woflx(io_co3) = column_woflx(io_co3)
      c_c_boflx(io_co3) = column_boflx(io_co3)
      c_c_rea(io_co3)   = column_rea(io_co3)

      c_c_xm_0(io_hco3)  = column_xm_0(io_hco3)
      c_c_xm_1(io_hco3)  = column_xm_1(io_hco3)
      c_c_woflx(io_hco3) = column_woflx(io_hco3)
      c_c_boflx(io_hco3) = column_boflx(io_hco3)
      c_c_rea(io_hco3)   = column_rea(io_hco3)

      c_c_xm_0(io_co2)  = column_xm_0(io_co2)
      c_c_xm_1(io_co2)  = column_xm_1(io_co2)
      c_c_woflx(io_co2) = column_woflx(io_co2)
      c_c_boflx(io_co2) = column_boflx(io_co2)
      c_c_rea(io_co2)   = column_rea(io_co2)

      c_c_xm_0(io_om)  = column_xm_0(io_om) *DBLE(om_c)
      c_c_xm_1(io_om)  = column_xm_1(io_om) *DBLE(om_c)
      c_c_woflx(io_om) = column_woflx(io_om)*DBLE(om_c)
      c_c_boflx(io_om) = column_boflx(io_om)*DBLE(om_c)
      c_c_rea(io_om)   = column_rea(io_om)  *DBLE(om_c)


                                    ! Column residuals
                                    ! ----------------

      c_c_resid(:)
     &  =   c_c_xm_1(:) - c_c_xm_0(:)
     &    - (c_c_woflx(:) - c_c_boflx(:)) - c_c_rea(:)


                                    ! Maximum residuals
                                    ! -----------------

      DO icompo = 1, ncompo
        m_c_resid(icompo)
     &   = MAX(m_c_resid(icompo), ABS(c_c_resid(icompo)))
      ENDDO




                                    ! Prepare (distribute, apply weights)
                                    ! variables related to "O2":
                                    ! -------------------------
                                    !  - c_o2_xm_0(:)
                                    !  - c_o2_xm_1(:)
                                    !  - c_o2_woflx(:)
                                    !  - c_o2_boflx(:)
                                    !  - c_o2_rea(:)
                                    !  - c_o2_resid(:)
                                    !  - m_o2_resid(:)


                                    ! First pre-set all to 0
      c_o2_xm_0(:)     = 0D0
      c_o2_xm_1(:)     = 0D0
      c_o2_woflx(:)    = 0D0
      c_o2_boflx(:)    = 0D0
      c_o2_rea(:)      = 0D0
      c_o2_resid(:)    = 0D0

                                    ! Copy in content from column_*
                                    ! and apply appropriate weights
      c_o2_xm_0(io_om)  = column_xm_0(io_om) *DBLE(-om_remin_o2)
      c_o2_xm_1(io_om)  = column_xm_1(io_om) *DBLE(-om_remin_o2)
      c_o2_woflx(io_om) = column_woflx(io_om)*DBLE(-om_remin_o2)
      c_o2_boflx(io_om) = column_boflx(io_om)*DBLE(-om_remin_o2)
      c_o2_rea(io_om)   = column_rea(io_om)  *DBLE(-om_remin_o2)

      c_o2_xm_0(io_o2)  = column_xm_0(io_o2)
      c_o2_xm_1(io_o2)  = column_xm_1(io_o2)
      c_o2_woflx(io_o2) = column_woflx(io_o2)
      c_o2_boflx(io_o2) = column_boflx(io_o2)
      c_o2_rea(io_o2)   = column_rea(io_o2)


                                    ! Column residuals
                                    ! ----------------

      c_o2_resid(:)
     &  =   c_o2_xm_1(:) - c_o2_xm_0(:)
     &    - (c_o2_woflx(:) - c_o2_boflx(:)) - c_o2_rea(:)


                                    ! Maximum residuals
                                    ! -----------------

      DO icompo = 1, ncompo
        m_o2_resid(icompo)
     &   = MAX(m_o2_resid(icompo), ABS(c_o2_resid(icompo)))
      ENDDO




                                    ! Prepare (distribute, apply weights)
                                    ! variables related to "PO4":
                                    ! --------------------------
                                    !  - c_po4_xm_0(:)
                                    !  - c_po4_xm_1(:)
                                    !  - c_po4_woflx(:)
                                    !  - c_po4_boflx(:)
                                    !  - c_po4_rea(:)
                                    !  - c_po4_resid(:)
                                    !  - m_po4_resid(:)


                                    ! First pre-set all to 0
      c_po4_xm_0(:)     = 0D0
      c_po4_xm_1(:)     = 0D0
      c_po4_woflx(:)    = 0D0
      c_po4_boflx(:)    = 0D0
      c_po4_rea(:)      = 0D0
      c_po4_resid(:)    = 0D0

                                    ! Copy in content from column_*
                                    ! and apply appropriate weights
      c_po4_xm_0(io_om)  = column_xm_0(io_om) *DBLE(om_p)
      c_po4_xm_1(io_om)  = column_xm_1(io_om) *DBLE(om_p)
      c_po4_woflx(io_om) = column_woflx(io_om)*DBLE(om_p)
      c_po4_boflx(io_om) = column_boflx(io_om)*DBLE(om_p)
      c_po4_rea(io_om)   = column_rea(io_om)  *DBLE(om_p)

      c_po4_xm_0(io_o2)  = column_xm_0(io_o2) *DBLE(-om_p/om_remin_o2)
      c_po4_xm_1(io_o2)  = column_xm_1(io_o2) *DBLE(-om_p/om_remin_o2)
      c_po4_woflx(io_o2) = column_woflx(io_o2)*DBLE(-om_p/om_remin_o2)
      c_po4_boflx(io_o2) = column_boflx(io_o2)*DBLE(-om_p/om_remin_o2)
      c_po4_rea(io_o2)   = column_rea(io_o2)  *DBLE(-om_p/om_remin_o2)


                                    ! Column residuals
                                    ! ----------------

      c_po4_resid(:)
     &  =   c_po4_xm_1(:) - c_po4_xm_0(:)
     &    - (c_po4_woflx(:) - c_po4_boflx(:)) - c_po4_rea(:)


                                    ! Maximum residuals
                                    ! -----------------

      DO icompo = 1, ncompo
        m_po4_resid(icompo)
     &   = MAX(m_po4_resid(icompo), ABS(c_po4_resid(icompo)))
      ENDDO


! [[CMB_createSpreadResults]]: End of creation
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_3.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


        ! Flux sums for the column: total fluxes
        ! ======================================

!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_4.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! [[CMB_createColumnSums]]: Start of creation

                                    ! Sums for alkalinity
                                    ! -------------------

                                    ! Total alk contents

        c_alk_bulk_porew_xm_0 = SIGMA_ALK_BULK_POREW(c_alk_xm_0(:))
        c_alk_bulk_solid_xm_0 = SIGMA_ALK_BULK_SOLID(c_alk_xm_0(:))

        c_alk_orgm_cnp_xm_0 = SIGMA_ALK_ORGM_CNP(c_alk_xm_0(:))


        c_alk_bulk_total_xm_0
     &    =   c_alk_bulk_porew_xm_0
     &      + c_alk_bulk_solid_xm_0

        c_alk_orgm_total_xm_0
     &    =   c_alk_orgm_cnp_xm_0


        c_alk_bulk_porew_xm_1 = SIGMA_ALK_BULK_POREW(c_alk_xm_1(:))
        c_alk_bulk_solid_xm_1 = SIGMA_ALK_BULK_SOLID(c_alk_xm_1(:))

        c_alk_orgm_cnp_xm_1 = SIGMA_ALK_ORGM_CNP(c_alk_xm_1(:))


        c_alk_bulk_total_xm_1
     &    =   c_alk_bulk_porew_xm_1
     &      + c_alk_bulk_solid_xm_1

        c_alk_orgm_total_xm_1
     &    =   c_alk_orgm_cnp_xm_1

                                    ! Total alk fluxes

        c_alk_bulk_porew_woflx = SIGMA_ALK_BULK_POREW(c_alk_woflx(:))
        c_alk_bulk_solid_woflx = SIGMA_ALK_BULK_SOLID(c_alk_woflx(:))

        c_alk_orgm_cnp_woflx = SIGMA_ALK_ORGM_CNP(c_alk_woflx(:))


        c_alk_bulk_total_woflx
     &    =   c_alk_bulk_porew_woflx
     &      + c_alk_bulk_solid_woflx

        c_alk_orgm_total_woflx
     &    =   c_alk_orgm_cnp_woflx


        c_alk_bulk_porew_boflx = SIGMA_ALK_BULK_POREW(c_alk_boflx(:))
        c_alk_bulk_solid_boflx = SIGMA_ALK_BULK_SOLID(c_alk_boflx(:))

        c_alk_orgm_cnp_boflx = SIGMA_ALK_ORGM_CNP(c_alk_boflx(:))


        c_alk_bulk_total_boflx
     &    =   c_alk_bulk_porew_boflx
     &      + c_alk_bulk_solid_boflx

        c_alk_orgm_total_boflx
     &    =   c_alk_orgm_cnp_boflx

                                    ! Total alk reacted

        c_alk_bulk_porew_rea = SIGMA_ALK_BULK_POREW(c_alk_rea(:))
        c_alk_bulk_solid_rea = SIGMA_ALK_BULK_SOLID(c_alk_rea(:))

        c_alk_orgm_cnp_rea = SIGMA_ALK_ORGM_CNP(c_alk_rea(:))


        c_alk_bulk_total_rea
     &    =   c_alk_bulk_porew_rea
     &      + c_alk_bulk_solid_rea

        c_alk_orgm_total_rea
     &    =   c_alk_orgm_cnp_rea

                                    ! Column and maximum residuals
                                    ! for alk carrying materials

        c_alk_bulk_porew_resid = SIGMA_ALK_BULK_POREW(c_alk_resid(:))
        c_alk_bulk_solid_resid = SIGMA_ALK_BULK_SOLID(c_alk_resid(:))

        c_alk_orgm_cnp_resid = SIGMA_ALK_ORGM_CNP(c_alk_resid(:))


        c_alk_bulk_total_resid
     &    =   c_alk_bulk_porew_resid
     &      + c_alk_bulk_solid_resid

        c_alk_orgm_total_resid
     &    =   c_alk_orgm_cnp_resid


        m_alk_bulk_total_resid
     &    = MAX(m_alk_bulk_total_resid, ABS(c_alk_bulk_total_resid))
        m_alk_bulk_porew_resid
     &    = MAX(m_alk_bulk_porew_resid, ABS(c_alk_bulk_porew_resid))
        m_alk_bulk_solid_resid
     &    = MAX(m_alk_bulk_solid_resid, ABS(c_alk_bulk_solid_resid))

        m_alk_orgm_total_resid
     &    = MAX(m_alk_orgm_total_resid, ABS(c_alk_orgm_total_resid))
        m_alk_orgm_cnp_resid
     &    = MAX(m_alk_orgm_cnp_resid, ABS(c_alk_orgm_cnp_resid))


                                    ! Sums for carbon
                                    ! ---------------

                                    ! Total C contents

        c_c_bulk_porew_xm_0 = SIGMA_C_BULK_POREW(c_c_xm_0(:))
        c_c_bulk_solid_xm_0 = SIGMA_C_BULK_SOLID(c_c_xm_0(:))

        c_c_orgm_cnp_xm_0 = SIGMA_C_ORGM_CNP(c_c_xm_0(:))


        c_c_bulk_total_xm_0
     &    =   c_c_bulk_porew_xm_0
     &      + c_c_bulk_solid_xm_0

        c_c_orgm_total_xm_0
     &    =   c_c_orgm_cnp_xm_0


        c_c_bulk_porew_xm_1 = SIGMA_C_BULK_POREW(c_c_xm_1(:))
        c_c_bulk_solid_xm_1 = SIGMA_C_BULK_SOLID(c_c_xm_1(:))

        c_c_orgm_cnp_xm_1 = SIGMA_C_ORGM_CNP(c_c_xm_1(:))


        c_c_bulk_total_xm_1
     &    =   c_c_bulk_porew_xm_1
     &      + c_c_bulk_solid_xm_1

        c_c_orgm_total_xm_1
     &    =   c_c_orgm_cnp_xm_1

                                    ! Total C fluxes

        c_c_bulk_porew_woflx = SIGMA_C_BULK_POREW(c_c_woflx(:))
        c_c_bulk_solid_woflx = SIGMA_C_BULK_SOLID(c_c_woflx(:))

        c_c_orgm_cnp_woflx = SIGMA_C_ORGM_CNP(c_c_woflx(:))


        c_c_bulk_total_woflx
     &    =   c_c_bulk_porew_woflx
     &      + c_c_bulk_solid_woflx

        c_c_orgm_total_woflx
     &    =   c_c_orgm_cnp_woflx


        c_c_bulk_porew_boflx = SIGMA_C_BULK_POREW(c_c_boflx(:))
        c_c_bulk_solid_boflx = SIGMA_C_BULK_SOLID(c_c_boflx(:))

        c_c_orgm_cnp_boflx = SIGMA_C_ORGM_CNP(c_c_boflx(:))


        c_c_bulk_total_boflx
     &    =   c_c_bulk_porew_boflx
     &      + c_c_bulk_solid_boflx

        c_c_orgm_total_boflx
     &    =   c_c_orgm_cnp_boflx

                                    ! Total C reacted

        c_c_bulk_porew_rea = SIGMA_C_BULK_POREW(c_c_rea(:))
        c_c_bulk_solid_rea = SIGMA_C_BULK_SOLID(c_c_rea(:))

        c_c_orgm_cnp_rea = SIGMA_C_ORGM_CNP(c_c_rea(:))


        c_c_bulk_total_rea
     &    =   c_c_bulk_porew_rea
     &      + c_c_bulk_solid_rea

        c_c_orgm_total_rea
     &    =   c_c_orgm_cnp_rea

                                    ! Column and maximum residuals
                                    ! for C carrying materials

        c_c_bulk_porew_resid = SIGMA_C_BULK_POREW(c_c_resid(:))
        c_c_bulk_solid_resid = SIGMA_C_BULK_SOLID(c_c_resid(:))

        c_c_orgm_cnp_resid = SIGMA_C_ORGM_CNP(c_c_resid(:))


        c_c_bulk_total_resid
     &    =   c_c_bulk_porew_resid
     &      + c_c_bulk_solid_resid

        c_c_orgm_total_resid
     &    =   c_c_orgm_cnp_resid


        m_c_bulk_total_resid
     &    = MAX(m_c_bulk_total_resid, ABS(c_c_bulk_total_resid))
        m_c_bulk_porew_resid
     &    = MAX(m_c_bulk_porew_resid, ABS(c_c_bulk_porew_resid))
        m_c_bulk_solid_resid
     &    = MAX(m_c_bulk_solid_resid, ABS(c_c_bulk_solid_resid))

        m_c_orgm_total_resid
     &    = MAX(m_c_orgm_total_resid, ABS(c_c_orgm_total_resid))
        m_c_orgm_cnp_resid
     &    = MAX(m_c_orgm_cnp_resid, ABS(c_c_orgm_cnp_resid))


                                    ! Sums for oxygen
                                    ! ---------------

                                    ! Total O2 contents

        c_o2_bulk_porew_xm_0 = SIGMA_O2_BULK_POREW(c_o2_xm_0(:))
        c_o2_bulk_solid_xm_0 = SIGMA_O2_BULK_SOLID(c_o2_xm_0(:))

        c_o2_orgm_cnp_xm_0 = SIGMA_O2_ORGM_CNP(c_o2_xm_0(:))


        c_o2_bulk_total_xm_0
     &    =   c_o2_bulk_porew_xm_0
     &      + c_o2_bulk_solid_xm_0

        c_o2_orgm_total_xm_0
     &    =   c_o2_orgm_cnp_xm_0


        c_o2_bulk_porew_xm_1 = SIGMA_O2_BULK_POREW(c_o2_xm_1(:))
        c_o2_bulk_solid_xm_1 = SIGMA_O2_BULK_SOLID(c_o2_xm_1(:))

        c_o2_orgm_cnp_xm_1 = SIGMA_O2_ORGM_CNP(c_o2_xm_1(:))


        c_o2_bulk_total_xm_1
     &    =   c_o2_bulk_porew_xm_1
     &      + c_o2_bulk_solid_xm_1

        c_o2_orgm_total_xm_1
     &    =   c_o2_orgm_cnp_xm_1

                                    ! Total O2 fluxes

        c_o2_bulk_porew_woflx = SIGMA_O2_BULK_POREW(c_o2_woflx(:))
        c_o2_bulk_solid_woflx = SIGMA_O2_BULK_SOLID(c_o2_woflx(:))

        c_o2_orgm_cnp_woflx = SIGMA_O2_ORGM_CNP(c_o2_woflx(:))


        c_o2_bulk_total_woflx
     &    =   c_o2_bulk_porew_woflx
     &      + c_o2_bulk_solid_woflx

        c_o2_orgm_total_woflx
     &    =   c_o2_orgm_cnp_woflx


        c_o2_bulk_porew_boflx = SIGMA_O2_BULK_POREW(c_o2_boflx(:))
        c_o2_bulk_solid_boflx = SIGMA_O2_BULK_SOLID(c_o2_boflx(:))

        c_o2_orgm_cnp_boflx = SIGMA_O2_ORGM_CNP(c_o2_boflx(:))


        c_o2_bulk_total_boflx
     &    =   c_o2_bulk_porew_boflx
     &      + c_o2_bulk_solid_boflx

        c_o2_orgm_total_boflx
     &    =   c_o2_orgm_cnp_boflx

                                    ! Total O2 reacted

        c_o2_bulk_porew_rea = SIGMA_O2_BULK_POREW(c_o2_rea(:))
        c_o2_bulk_solid_rea = SIGMA_O2_BULK_SOLID(c_o2_rea(:))

        c_o2_orgm_cnp_rea = SIGMA_O2_ORGM_CNP(c_o2_rea(:))


        c_o2_bulk_total_rea
     &    =   c_o2_bulk_porew_rea
     &      + c_o2_bulk_solid_rea

        c_o2_orgm_total_rea
     &    =   c_o2_orgm_cnp_rea

                                    ! Column and maximum residuals
                                    ! for O2 carrying materials

        c_o2_bulk_porew_resid = SIGMA_O2_BULK_POREW(c_o2_resid(:))
        c_o2_bulk_solid_resid = SIGMA_O2_BULK_SOLID(c_o2_resid(:))

        c_o2_orgm_cnp_resid = SIGMA_O2_ORGM_CNP(c_o2_resid(:))


        c_o2_bulk_total_resid
     &    =   c_o2_bulk_porew_resid
     &      + c_o2_bulk_solid_resid

        c_o2_orgm_total_resid
     &    =   c_o2_orgm_cnp_resid


        m_o2_bulk_total_resid
     &    = MAX(m_o2_bulk_total_resid, ABS(c_o2_bulk_total_resid))
        m_o2_bulk_porew_resid
     &    = MAX(m_o2_bulk_porew_resid, ABS(c_o2_bulk_porew_resid))
        m_o2_bulk_solid_resid
     &    = MAX(m_o2_bulk_solid_resid, ABS(c_o2_bulk_solid_resid))

        m_o2_orgm_total_resid
     &    = MAX(m_o2_orgm_total_resid, ABS(c_o2_orgm_total_resid))
        m_o2_orgm_cnp_resid
     &    = MAX(m_o2_orgm_cnp_resid, ABS(c_o2_orgm_cnp_resid))


                                    ! Sums for phosphate
                                    ! ------------------

                                    ! Total PO4 contents

        c_po4_bulk_porew_xm_0 = SIGMA_PO4_BULK_POREW(c_po4_xm_0(:))
        c_po4_bulk_solid_xm_0 = SIGMA_PO4_BULK_SOLID(c_po4_xm_0(:))

        c_po4_orgm_cnp_xm_0 = SIGMA_PO4_ORGM_CNP(c_po4_xm_0(:))


        c_po4_bulk_total_xm_0
     &    =   c_po4_bulk_porew_xm_0
     &      + c_po4_bulk_solid_xm_0

        c_po4_orgm_total_xm_0
     &    =   c_po4_orgm_cnp_xm_0


        c_po4_bulk_porew_xm_1 = SIGMA_PO4_BULK_POREW(c_po4_xm_1(:))
        c_po4_bulk_solid_xm_1 = SIGMA_PO4_BULK_SOLID(c_po4_xm_1(:))

        c_po4_orgm_cnp_xm_1 = SIGMA_PO4_ORGM_CNP(c_po4_xm_1(:))


        c_po4_bulk_total_xm_1
     &    =   c_po4_bulk_porew_xm_1
     &      + c_po4_bulk_solid_xm_1

        c_po4_orgm_total_xm_1
     &    =   c_po4_orgm_cnp_xm_1

                                    ! Total PO4 fluxes

        c_po4_bulk_porew_woflx = SIGMA_PO4_BULK_POREW(c_po4_woflx(:))
        c_po4_bulk_solid_woflx = SIGMA_PO4_BULK_SOLID(c_po4_woflx(:))

        c_po4_orgm_cnp_woflx = SIGMA_PO4_ORGM_CNP(c_po4_woflx(:))


        c_po4_bulk_total_woflx
     &    =   c_po4_bulk_porew_woflx
     &      + c_po4_bulk_solid_woflx

        c_po4_orgm_total_woflx
     &    =   c_po4_orgm_cnp_woflx


        c_po4_bulk_porew_boflx = SIGMA_PO4_BULK_POREW(c_po4_boflx(:))
        c_po4_bulk_solid_boflx = SIGMA_PO4_BULK_SOLID(c_po4_boflx(:))

        c_po4_orgm_cnp_boflx = SIGMA_PO4_ORGM_CNP(c_po4_boflx(:))


        c_po4_bulk_total_boflx
     &    =   c_po4_bulk_porew_boflx
     &      + c_po4_bulk_solid_boflx

        c_po4_orgm_total_boflx
     &    =   c_po4_orgm_cnp_boflx

                                    ! Total PO4 reacted

        c_po4_bulk_porew_rea = SIGMA_PO4_BULK_POREW(c_po4_rea(:))
        c_po4_bulk_solid_rea = SIGMA_PO4_BULK_SOLID(c_po4_rea(:))

        c_po4_orgm_cnp_rea = SIGMA_PO4_ORGM_CNP(c_po4_rea(:))


        c_po4_bulk_total_rea
     &    =   c_po4_bulk_porew_rea
     &      + c_po4_bulk_solid_rea

        c_po4_orgm_total_rea
     &    =   c_po4_orgm_cnp_rea

                                    ! Column and maximum residuals
                                    ! for PO4 carrying materials

        c_po4_bulk_porew_resid = SIGMA_PO4_BULK_POREW(c_po4_resid(:))
        c_po4_bulk_solid_resid = SIGMA_PO4_BULK_SOLID(c_po4_resid(:))

        c_po4_orgm_cnp_resid = SIGMA_PO4_ORGM_CNP(c_po4_resid(:))


        c_po4_bulk_total_resid
     &    =   c_po4_bulk_porew_resid
     &      + c_po4_bulk_solid_resid

        c_po4_orgm_total_resid
     &    =   c_po4_orgm_cnp_resid


        m_po4_bulk_total_resid
     &    = MAX(m_po4_bulk_total_resid, ABS(c_po4_bulk_total_resid))
        m_po4_bulk_porew_resid
     &    = MAX(m_po4_bulk_porew_resid, ABS(c_po4_bulk_porew_resid))
        m_po4_bulk_solid_resid
     &    = MAX(m_po4_bulk_solid_resid, ABS(c_po4_bulk_solid_resid))

        m_po4_orgm_total_resid
     &    = MAX(m_po4_orgm_total_resid, ABS(c_po4_orgm_total_resid))
        m_po4_orgm_cnp_resid
     &    = MAX(m_po4_orgm_cnp_resid, ABS(c_po4_orgm_cnp_resid))


! [[CMB_createColumnSums]]: End of creation
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_4.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


        ! Global sums for individual components
        ! =====================================

        global_xm_0(:)     = global_xm_0(:) + sfc_area*column_xm_0(:)

        global_xm_1(:)     = global_xm_1(:) + sfc_area*column_xm_1(:)

        global_woflx(:)    = global_woflx(:) + sfc_area*column_woflx(:)

        global_boflx(:)    = global_boflx(:) + sfc_area*column_boflx(:)

        global_rea(:)      = global_rea(:)   + sfc_area*column_rea(:)


        global_residual(:) = global_residual(:)
     &                                     + sfc_area*column_residual(:)


        ! Global sums for the conservation properties
        ! ===========================================

!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_5.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! [[CMB_createGlobalSumsTotals]]: Start of creation



        ! Global sums for alkalinity carrying materials
        ! ---------------------------------------------

        g_alk_xm_0(:)
     &    = g_alk_xm_0(:) + sfc_area*c_alk_xm_0(:)

        g_alk_xm_1(:)
     &    = g_alk_xm_1(:) + sfc_area*c_alk_xm_1(:)

        g_alk_woflx(:)
     &    = g_alk_woflx(:) + sfc_area*c_alk_woflx(:)

        g_alk_boflx(:)
     &    = g_alk_boflx(:) + sfc_area*c_alk_boflx(:)

        g_alk_rea(:)
     &    = g_alk_rea(:) + sfc_area*c_alk_rea(:)

        g_alk_resid(:)
     &    = g_alk_resid(:) + sfc_area*c_alk_resid(:)


        g_alk_bulk_porew_xm_0
     &    = g_alk_bulk_porew_xm_0 + sfc_area*c_alk_bulk_porew_xm_0
        g_alk_bulk_solid_xm_0
     &    = g_alk_bulk_solid_xm_0 + sfc_area*c_alk_bulk_solid_xm_0

        g_alk_orgm_cnp_xm_0
     &    = g_alk_orgm_cnp_xm_0 + sfc_area*c_alk_orgm_cnp_xm_0



        g_alk_bulk_porew_xm_1
     &    = g_alk_bulk_porew_xm_1 + sfc_area*c_alk_bulk_porew_xm_1
        g_alk_bulk_solid_xm_1
     &    = g_alk_bulk_solid_xm_1 + sfc_area*c_alk_bulk_solid_xm_1

        g_alk_orgm_cnp_xm_1
     &    = g_alk_orgm_cnp_xm_1 + sfc_area*c_alk_orgm_cnp_xm_1



        g_alk_bulk_porew_woflx
     &    = g_alk_bulk_porew_woflx + sfc_area*c_alk_bulk_porew_woflx
        g_alk_bulk_solid_woflx
     &    = g_alk_bulk_solid_woflx + sfc_area*c_alk_bulk_solid_woflx

        g_alk_orgm_cnp_woflx
     &    = g_alk_orgm_cnp_woflx + sfc_area*c_alk_orgm_cnp_woflx



        g_alk_bulk_porew_boflx
     &    = g_alk_bulk_porew_boflx + sfc_area*c_alk_bulk_porew_boflx
        g_alk_bulk_solid_boflx
     &    = g_alk_bulk_solid_boflx + sfc_area*c_alk_bulk_solid_boflx

        g_alk_orgm_cnp_boflx
     &    = g_alk_orgm_cnp_boflx + sfc_area*c_alk_orgm_cnp_boflx



        g_alk_bulk_porew_rea
     &    = g_alk_bulk_porew_rea + sfc_area*c_alk_bulk_porew_rea
        g_alk_bulk_solid_rea
     &    = g_alk_bulk_solid_rea + sfc_area*c_alk_bulk_solid_rea

        g_alk_orgm_cnp_rea
     &    = g_alk_orgm_cnp_rea + sfc_area*c_alk_orgm_cnp_rea



        g_alk_bulk_porew_resid
     &    = g_alk_bulk_porew_resid + sfc_area*c_alk_bulk_porew_resid
        g_alk_bulk_solid_resid
     &    = g_alk_bulk_solid_resid + sfc_area*c_alk_bulk_solid_resid

        g_alk_orgm_cnp_resid
     &    = g_alk_orgm_cnp_resid + sfc_area*c_alk_orgm_cnp_resid




        ! Global sums for carbon carrying materials
        ! -----------------------------------------

        g_c_xm_0(:)
     &    = g_c_xm_0(:) + sfc_area*c_c_xm_0(:)

        g_c_xm_1(:)
     &    = g_c_xm_1(:) + sfc_area*c_c_xm_1(:)

        g_c_woflx(:)
     &    = g_c_woflx(:) + sfc_area*c_c_woflx(:)

        g_c_boflx(:)
     &    = g_c_boflx(:) + sfc_area*c_c_boflx(:)

        g_c_rea(:)
     &    = g_c_rea(:) + sfc_area*c_c_rea(:)

        g_c_resid(:)
     &    = g_c_resid(:) + sfc_area*c_c_resid(:)


        g_c_bulk_porew_xm_0
     &    = g_c_bulk_porew_xm_0 + sfc_area*c_c_bulk_porew_xm_0
        g_c_bulk_solid_xm_0
     &    = g_c_bulk_solid_xm_0 + sfc_area*c_c_bulk_solid_xm_0

        g_c_orgm_cnp_xm_0
     &    = g_c_orgm_cnp_xm_0 + sfc_area*c_c_orgm_cnp_xm_0



        g_c_bulk_porew_xm_1
     &    = g_c_bulk_porew_xm_1 + sfc_area*c_c_bulk_porew_xm_1
        g_c_bulk_solid_xm_1
     &    = g_c_bulk_solid_xm_1 + sfc_area*c_c_bulk_solid_xm_1

        g_c_orgm_cnp_xm_1
     &    = g_c_orgm_cnp_xm_1 + sfc_area*c_c_orgm_cnp_xm_1



        g_c_bulk_porew_woflx
     &    = g_c_bulk_porew_woflx + sfc_area*c_c_bulk_porew_woflx
        g_c_bulk_solid_woflx
     &    = g_c_bulk_solid_woflx + sfc_area*c_c_bulk_solid_woflx

        g_c_orgm_cnp_woflx
     &    = g_c_orgm_cnp_woflx + sfc_area*c_c_orgm_cnp_woflx



        g_c_bulk_porew_boflx
     &    = g_c_bulk_porew_boflx + sfc_area*c_c_bulk_porew_boflx
        g_c_bulk_solid_boflx
     &    = g_c_bulk_solid_boflx + sfc_area*c_c_bulk_solid_boflx

        g_c_orgm_cnp_boflx
     &    = g_c_orgm_cnp_boflx + sfc_area*c_c_orgm_cnp_boflx



        g_c_bulk_porew_rea
     &    = g_c_bulk_porew_rea + sfc_area*c_c_bulk_porew_rea
        g_c_bulk_solid_rea
     &    = g_c_bulk_solid_rea + sfc_area*c_c_bulk_solid_rea

        g_c_orgm_cnp_rea
     &    = g_c_orgm_cnp_rea + sfc_area*c_c_orgm_cnp_rea



        g_c_bulk_porew_resid
     &    = g_c_bulk_porew_resid + sfc_area*c_c_bulk_porew_resid
        g_c_bulk_solid_resid
     &    = g_c_bulk_solid_resid + sfc_area*c_c_bulk_solid_resid

        g_c_orgm_cnp_resid
     &    = g_c_orgm_cnp_resid + sfc_area*c_c_orgm_cnp_resid




        ! Global sums for oxygen carrying materials
        ! -----------------------------------------

        g_o2_xm_0(:)
     &    = g_o2_xm_0(:) + sfc_area*c_o2_xm_0(:)

        g_o2_xm_1(:)
     &    = g_o2_xm_1(:) + sfc_area*c_o2_xm_1(:)

        g_o2_woflx(:)
     &    = g_o2_woflx(:) + sfc_area*c_o2_woflx(:)

        g_o2_boflx(:)
     &    = g_o2_boflx(:) + sfc_area*c_o2_boflx(:)

        g_o2_rea(:)
     &    = g_o2_rea(:) + sfc_area*c_o2_rea(:)

        g_o2_resid(:)
     &    = g_o2_resid(:) + sfc_area*c_o2_resid(:)


        g_o2_bulk_porew_xm_0
     &    = g_o2_bulk_porew_xm_0 + sfc_area*c_o2_bulk_porew_xm_0
        g_o2_bulk_solid_xm_0
     &    = g_o2_bulk_solid_xm_0 + sfc_area*c_o2_bulk_solid_xm_0

        g_o2_orgm_cnp_xm_0
     &    = g_o2_orgm_cnp_xm_0 + sfc_area*c_o2_orgm_cnp_xm_0



        g_o2_bulk_porew_xm_1
     &    = g_o2_bulk_porew_xm_1 + sfc_area*c_o2_bulk_porew_xm_1
        g_o2_bulk_solid_xm_1
     &    = g_o2_bulk_solid_xm_1 + sfc_area*c_o2_bulk_solid_xm_1

        g_o2_orgm_cnp_xm_1
     &    = g_o2_orgm_cnp_xm_1 + sfc_area*c_o2_orgm_cnp_xm_1



        g_o2_bulk_porew_woflx
     &    = g_o2_bulk_porew_woflx + sfc_area*c_o2_bulk_porew_woflx
        g_o2_bulk_solid_woflx
     &    = g_o2_bulk_solid_woflx + sfc_area*c_o2_bulk_solid_woflx

        g_o2_orgm_cnp_woflx
     &    = g_o2_orgm_cnp_woflx + sfc_area*c_o2_orgm_cnp_woflx



        g_o2_bulk_porew_boflx
     &    = g_o2_bulk_porew_boflx + sfc_area*c_o2_bulk_porew_boflx
        g_o2_bulk_solid_boflx
     &    = g_o2_bulk_solid_boflx + sfc_area*c_o2_bulk_solid_boflx

        g_o2_orgm_cnp_boflx
     &    = g_o2_orgm_cnp_boflx + sfc_area*c_o2_orgm_cnp_boflx



        g_o2_bulk_porew_rea
     &    = g_o2_bulk_porew_rea + sfc_area*c_o2_bulk_porew_rea
        g_o2_bulk_solid_rea
     &    = g_o2_bulk_solid_rea + sfc_area*c_o2_bulk_solid_rea

        g_o2_orgm_cnp_rea
     &    = g_o2_orgm_cnp_rea + sfc_area*c_o2_orgm_cnp_rea



        g_o2_bulk_porew_resid
     &    = g_o2_bulk_porew_resid + sfc_area*c_o2_bulk_porew_resid
        g_o2_bulk_solid_resid
     &    = g_o2_bulk_solid_resid + sfc_area*c_o2_bulk_solid_resid

        g_o2_orgm_cnp_resid
     &    = g_o2_orgm_cnp_resid + sfc_area*c_o2_orgm_cnp_resid




        ! Global sums for phosphate carrying materials
        ! --------------------------------------------

        g_po4_xm_0(:)
     &    = g_po4_xm_0(:) + sfc_area*c_po4_xm_0(:)

        g_po4_xm_1(:)
     &    = g_po4_xm_1(:) + sfc_area*c_po4_xm_1(:)

        g_po4_woflx(:)
     &    = g_po4_woflx(:) + sfc_area*c_po4_woflx(:)

        g_po4_boflx(:)
     &    = g_po4_boflx(:) + sfc_area*c_po4_boflx(:)

        g_po4_rea(:)
     &    = g_po4_rea(:) + sfc_area*c_po4_rea(:)

        g_po4_resid(:)
     &    = g_po4_resid(:) + sfc_area*c_po4_resid(:)


        g_po4_bulk_porew_xm_0
     &    = g_po4_bulk_porew_xm_0 + sfc_area*c_po4_bulk_porew_xm_0
        g_po4_bulk_solid_xm_0
     &    = g_po4_bulk_solid_xm_0 + sfc_area*c_po4_bulk_solid_xm_0

        g_po4_orgm_cnp_xm_0
     &    = g_po4_orgm_cnp_xm_0 + sfc_area*c_po4_orgm_cnp_xm_0



        g_po4_bulk_porew_xm_1
     &    = g_po4_bulk_porew_xm_1 + sfc_area*c_po4_bulk_porew_xm_1
        g_po4_bulk_solid_xm_1
     &    = g_po4_bulk_solid_xm_1 + sfc_area*c_po4_bulk_solid_xm_1

        g_po4_orgm_cnp_xm_1
     &    = g_po4_orgm_cnp_xm_1 + sfc_area*c_po4_orgm_cnp_xm_1



        g_po4_bulk_porew_woflx
     &    = g_po4_bulk_porew_woflx + sfc_area*c_po4_bulk_porew_woflx
        g_po4_bulk_solid_woflx
     &    = g_po4_bulk_solid_woflx + sfc_area*c_po4_bulk_solid_woflx

        g_po4_orgm_cnp_woflx
     &    = g_po4_orgm_cnp_woflx + sfc_area*c_po4_orgm_cnp_woflx



        g_po4_bulk_porew_boflx
     &    = g_po4_bulk_porew_boflx + sfc_area*c_po4_bulk_porew_boflx
        g_po4_bulk_solid_boflx
     &    = g_po4_bulk_solid_boflx + sfc_area*c_po4_bulk_solid_boflx

        g_po4_orgm_cnp_boflx
     &    = g_po4_orgm_cnp_boflx + sfc_area*c_po4_orgm_cnp_boflx



        g_po4_bulk_porew_rea
     &    = g_po4_bulk_porew_rea + sfc_area*c_po4_bulk_porew_rea
        g_po4_bulk_solid_rea
     &    = g_po4_bulk_solid_rea + sfc_area*c_po4_bulk_solid_rea

        g_po4_orgm_cnp_rea
     &    = g_po4_orgm_cnp_rea + sfc_area*c_po4_orgm_cnp_rea



        g_po4_bulk_porew_resid
     &    = g_po4_bulk_porew_resid + sfc_area*c_po4_bulk_porew_resid
        g_po4_bulk_solid_resid
     &    = g_po4_bulk_solid_resid + sfc_area*c_po4_bulk_solid_resid

        g_po4_orgm_cnp_resid
     &    = g_po4_orgm_cnp_resid + sfc_area*c_po4_orgm_cnp_resid


! [[CMB_createGlobalSumsTotals]]: End of creation
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_5.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


      ENDDO

!!!   HEREAFTER:
!!!    - THE INTERNAL SIGMA_XYZ FUNCTIONS MUST NOT BE CALLED.
!!!      THE RESULTS WILL BE UNRELIABLE!
!!!    - NO om_x, ... PARAMETERS MUST BE USED HEREAFTER
!!!      AS THEIR VALUES MAY BE COLUMN-DEPENDENT


!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_6.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! [[CMB_createGlobalSumsTotals]]: Start of creation


        g_alk_bulk_total_xm_0
     &    =   g_alk_bulk_porew_xm_0
     &      + g_alk_bulk_solid_xm_0

        g_alk_orgm_total_xm_0
     &    =   g_alk_orgm_cnp_xm_0




        g_alk_bulk_total_xm_1
     &    =   g_alk_bulk_porew_xm_1
     &      + g_alk_bulk_solid_xm_1

        g_alk_orgm_total_xm_1
     &    =   g_alk_orgm_cnp_xm_1




        g_alk_bulk_total_woflx
     &    =   g_alk_bulk_porew_woflx
     &      + g_alk_bulk_solid_woflx

        g_alk_orgm_total_woflx
     &    =   g_alk_orgm_cnp_woflx




        g_alk_bulk_total_boflx
     &    =   g_alk_bulk_porew_boflx
     &      + g_alk_bulk_solid_boflx

        g_alk_orgm_total_boflx
     &    =   g_alk_orgm_cnp_boflx




        g_alk_bulk_total_rea
     &    =   g_alk_bulk_porew_rea
     &      + g_alk_bulk_solid_rea

        g_alk_orgm_total_rea
     &    =   g_alk_orgm_cnp_rea




        g_alk_bulk_total_resid
     &    =   g_alk_bulk_porew_resid
     &      + g_alk_bulk_solid_resid

        g_alk_orgm_total_resid
     &    =   g_alk_orgm_cnp_resid




        g_c_bulk_total_xm_0
     &    =   g_c_bulk_porew_xm_0
     &      + g_c_bulk_solid_xm_0

        g_c_orgm_total_xm_0
     &    =   g_c_orgm_cnp_xm_0




        g_c_bulk_total_xm_1
     &    =   g_c_bulk_porew_xm_1
     &      + g_c_bulk_solid_xm_1

        g_c_orgm_total_xm_1
     &    =   g_c_orgm_cnp_xm_1




        g_c_bulk_total_woflx
     &    =   g_c_bulk_porew_woflx
     &      + g_c_bulk_solid_woflx

        g_c_orgm_total_woflx
     &    =   g_c_orgm_cnp_woflx




        g_c_bulk_total_boflx
     &    =   g_c_bulk_porew_boflx
     &      + g_c_bulk_solid_boflx

        g_c_orgm_total_boflx
     &    =   g_c_orgm_cnp_boflx




        g_c_bulk_total_rea
     &    =   g_c_bulk_porew_rea
     &      + g_c_bulk_solid_rea

        g_c_orgm_total_rea
     &    =   g_c_orgm_cnp_rea




        g_c_bulk_total_resid
     &    =   g_c_bulk_porew_resid
     &      + g_c_bulk_solid_resid

        g_c_orgm_total_resid
     &    =   g_c_orgm_cnp_resid




        g_o2_bulk_total_xm_0
     &    =   g_o2_bulk_porew_xm_0
     &      + g_o2_bulk_solid_xm_0

        g_o2_orgm_total_xm_0
     &    =   g_o2_orgm_cnp_xm_0




        g_o2_bulk_total_xm_1
     &    =   g_o2_bulk_porew_xm_1
     &      + g_o2_bulk_solid_xm_1

        g_o2_orgm_total_xm_1
     &    =   g_o2_orgm_cnp_xm_1




        g_o2_bulk_total_woflx
     &    =   g_o2_bulk_porew_woflx
     &      + g_o2_bulk_solid_woflx

        g_o2_orgm_total_woflx
     &    =   g_o2_orgm_cnp_woflx




        g_o2_bulk_total_boflx
     &    =   g_o2_bulk_porew_boflx
     &      + g_o2_bulk_solid_boflx

        g_o2_orgm_total_boflx
     &    =   g_o2_orgm_cnp_boflx




        g_o2_bulk_total_rea
     &    =   g_o2_bulk_porew_rea
     &      + g_o2_bulk_solid_rea

        g_o2_orgm_total_rea
     &    =   g_o2_orgm_cnp_rea




        g_o2_bulk_total_resid
     &    =   g_o2_bulk_porew_resid
     &      + g_o2_bulk_solid_resid

        g_o2_orgm_total_resid
     &    =   g_o2_orgm_cnp_resid




        g_po4_bulk_total_xm_0
     &    =   g_po4_bulk_porew_xm_0
     &      + g_po4_bulk_solid_xm_0

        g_po4_orgm_total_xm_0
     &    =   g_po4_orgm_cnp_xm_0




        g_po4_bulk_total_xm_1
     &    =   g_po4_bulk_porew_xm_1
     &      + g_po4_bulk_solid_xm_1

        g_po4_orgm_total_xm_1
     &    =   g_po4_orgm_cnp_xm_1




        g_po4_bulk_total_woflx
     &    =   g_po4_bulk_porew_woflx
     &      + g_po4_bulk_solid_woflx

        g_po4_orgm_total_woflx
     &    =   g_po4_orgm_cnp_woflx




        g_po4_bulk_total_boflx
     &    =   g_po4_bulk_porew_boflx
     &      + g_po4_bulk_solid_boflx

        g_po4_orgm_total_boflx
     &    =   g_po4_orgm_cnp_boflx




        g_po4_bulk_total_rea
     &    =   g_po4_bulk_porew_rea
     &      + g_po4_bulk_solid_rea

        g_po4_orgm_total_rea
     &    =   g_po4_orgm_cnp_rea




        g_po4_bulk_total_resid
     &    =   g_po4_bulk_porew_resid
     &      + g_po4_bulk_solid_resid

        g_po4_orgm_total_resid
     &    =   g_po4_orgm_cnp_resid


! [[CMB_createGlobalSumsTotals]]: End of creation
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_6.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>




!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! Print out report
!- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' Maximum column mass balance residuals'
      WRITE(jp_stdlog,fmta) ' ====================================='

!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_7.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! [[CMB_createPrintResiduals_Rea]]: Start of creation
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Alkalinity (eq/m2)'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   CO3                 ',
     &                       m_alk_resid(io_co3)
      WRITE(jp_stdlog,fmt1) '   HCO3                ',
     &                       m_alk_resid(io_hco3)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma porew         ',
     &                       m_alk_bulk_porew_resid
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   Calcite             ',
     &                       m_alk_resid(io_calc)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       m_alk_resid(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma solid         ',
     &                       m_alk_bulk_solid_resid
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       m_alk_bulk_total_resid

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Carbon (mol C/m2)'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   CO3                 ',
     &                       m_c_resid(io_co3)
      WRITE(jp_stdlog,fmt1) '   HCO3                ',
     &                       m_c_resid(io_hco3)
      WRITE(jp_stdlog,fmt1) '   CO2                 ',
     &                       m_c_resid(io_co2)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma porew         ',
     &                       m_c_bulk_porew_resid
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   Calcite             ',
     &                       m_c_resid(io_calc)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       m_c_resid(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma solid         ',
     &                       m_c_bulk_solid_resid
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       m_c_bulk_total_resid

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Oxygen (mol O2/m2)'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   O2                  ',
     &                       m_o2_resid(io_o2)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       m_o2_resid(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       m_o2_bulk_total_resid

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Phosphate (mol PO4/m2)'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   O2                  ',
     &                       m_po4_resid(io_o2)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       m_po4_resid(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       m_po4_bulk_total_resid
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! [[CMB_createPrintResiduals_Rea]]: End of creation
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_7.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' Global mass balance residuals'
      WRITE(jp_stdlog,fmta) ' ============================='

!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_8.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! [[CMB_createPrintResiduals_Rea]]: Start of creation
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Alkalinity (eq)'
      WRITE(jp_stdlog,fmt1) '   CO3                 ',
     &                       g_alk_resid(io_co3)
      WRITE(jp_stdlog,fmt1) '   HCO3                ',
     &                       g_alk_resid(io_hco3)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma porew         ',
     &                       g_alk_bulk_porew_resid
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   Calcite             ',
     &                       g_alk_resid(io_calc)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       g_alk_resid(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma solid         ',
     &                       g_alk_bulk_solid_resid
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       g_alk_bulk_total_resid

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Carbon (mol C)'
      WRITE(jp_stdlog,fmt1) '   CO3                 ',
     &                       g_c_resid(io_co3)
      WRITE(jp_stdlog,fmt1) '   HCO3                ',
     &                       g_c_resid(io_hco3)
      WRITE(jp_stdlog,fmt1) '   CO2                 ',
     &                       g_c_resid(io_co2)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma porew         ',
     &                       g_c_bulk_porew_resid
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   Calcite             ',
     &                       g_c_resid(io_calc)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       g_c_resid(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma solid         ',
     &                       g_c_bulk_solid_resid
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       g_c_bulk_total_resid

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Oxygen (mol O2)'
      WRITE(jp_stdlog,fmt1) '   O2                  ',
     &                       g_o2_resid(io_o2)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       g_o2_resid(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       g_o2_bulk_total_resid

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Phosphate (mol PO4)'
      WRITE(jp_stdlog,fmt1) '   O2                  ',
     &                       g_po4_resid(io_o2)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       g_po4_resid(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       g_po4_bulk_total_resid
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! [[CMB_createPrintResiduals_Rea]]: End of creation
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_8.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' Global reaction rates'
      WRITE(jp_stdlog,fmta) ' ====================='

!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_9.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! [[CMB_createPrintResiduals_Rea]]: Start of creation
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Alkalinity (eq/dt)'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   CO3                 ',
     &                       g_alk_rea(io_co3)
      WRITE(jp_stdlog,fmt1) '   HCO3                ',
     &                       g_alk_rea(io_hco3)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma porew         ',
     &                       g_alk_bulk_porew_rea
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   Calcite             ',
     &                       g_alk_rea(io_calc)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       g_alk_rea(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma solid         ',
     &                       g_alk_bulk_solid_rea
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       g_alk_bulk_total_rea

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Carbon (mol C/dt)'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   CO3                 ',
     &                       g_c_rea(io_co3)
      WRITE(jp_stdlog,fmt1) '   HCO3                ',
     &                       g_c_rea(io_hco3)
      WRITE(jp_stdlog,fmt1) '   CO2                 ',
     &                       g_c_rea(io_co2)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma porew         ',
     &                       g_c_bulk_porew_rea
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   Calcite             ',
     &                       g_c_rea(io_calc)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       g_c_rea(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma solid         ',
     &                       g_c_bulk_solid_rea
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       g_c_bulk_total_rea

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Oxygen (mol O2/dt)'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   O2                  ',
     &                       g_o2_rea(io_o2)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       g_o2_rea(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       g_o2_bulk_total_rea

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Phosphate (mol PO4/dt)'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt1) '   O2                  ',
     &                       g_po4_rea(io_o2)
      WRITE(jp_stdlog,fmt1) '   OrgMatter           ',
     &                       g_po4_rea(io_om)
      WRITE(jp_stdlog,fmtl) '   --------------------'
      WRITE(jp_stdlog,fmt1) '   Sigma total         ',
     &                       g_po4_bulk_total_rea
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! [[CMB_createPrintResiduals_Rea]]: End of creation
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_9.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' Global Mass Balances'
      WRITE(jp_stdlog,fmta) ' ===================='

!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_10.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! [[CMB_createPrintGlobalInfos]]: Start of creation
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Alkalinity (eq [eq/eq_t])'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) '   Sigma porew         '
      net =   g_alk_bulk_porew_woflx - g_alk_bulk_porew_boflx
     &      + g_alk_bulk_porew_rea
      del =   g_alk_bulk_porew_xm_1 - g_alk_bulk_porew_xm_0
      ref =  (g_alk_bulk_porew_xm_1 + g_alk_bulk_porew_xm_0)/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_alk_bulk_porew_woflx
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_alk_bulk_porew_boflx
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_alk_bulk_porew_rea
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', del - net, (del-net)/ref
      WRITE(jp_stdlog,'()')


      io = io_calc
      WRITE(jp_stdlog,fmta) '   Calcite             '
      net =   g_alk_woflx(io) - g_alk_boflx(io)
     &      + g_alk_rea(io)
      del =   g_alk_xm_1(io) - g_alk_xm_0(io)
      ref =  (g_alk_xm_1(io) + g_alk_xm_0(io))/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_alk_woflx(io)
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_alk_boflx(io)
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_alk_rea(io)
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', (del - net), (del-net)/
     &      ref
      WRITE(jp_stdlog,'()')

      io = io_om
      WRITE(jp_stdlog,fmta) '   OrgMatter           '
      net =   g_alk_woflx(io) - g_alk_boflx(io)
     &      + g_alk_rea(io)
      del =   g_alk_xm_1(io) - g_alk_xm_0(io)
      ref =  (g_alk_xm_1(io) + g_alk_xm_0(io))/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_alk_woflx(io)
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_alk_boflx(io)
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_alk_rea(io)
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', (del - net), (del-net)/
     &      ref
      WRITE(jp_stdlog,'()')

      WRITE(jp_stdlog,fmta) '   Sigma solid         '
      net =   g_alk_bulk_solid_woflx - g_alk_bulk_solid_boflx
     &      + g_alk_bulk_solid_rea
      del =   g_alk_bulk_solid_xm_1 - g_alk_bulk_solid_xm_0
      ref =  (g_alk_bulk_solid_xm_1 + g_alk_bulk_solid_xm_0)/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_alk_bulk_solid_woflx
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_alk_bulk_solid_boflx
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_alk_bulk_solid_rea
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', del - net, (del-net)/ref
      WRITE(jp_stdlog,'()')


      WRITE(jp_stdlog,fmta) '   Sigma total         '
      net =   g_alk_bulk_total_woflx - g_alk_bulk_total_boflx
     &      + g_alk_bulk_total_rea
      del =   g_alk_bulk_total_xm_1 - g_alk_bulk_total_xm_0
      ref =  (g_alk_bulk_total_xm_1 + g_alk_bulk_total_xm_0)/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_alk_bulk_total_woflx
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_alk_bulk_total_boflx
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_alk_bulk_total_rea
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', del - net, (del-net)/ref
      WRITE(jp_stdlog,'()')



      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Carbon (mol C [mol/mol_t])'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) '   Sigma porew         '
      net =   g_c_bulk_porew_woflx - g_c_bulk_porew_boflx
     &      + g_c_bulk_porew_rea
      del =   g_c_bulk_porew_xm_1 - g_c_bulk_porew_xm_0
      ref =  (g_c_bulk_porew_xm_1 + g_c_bulk_porew_xm_0)/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_c_bulk_porew_woflx
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_c_bulk_porew_boflx
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_c_bulk_porew_rea
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', del - net, (del-net)/ref
      WRITE(jp_stdlog,'()')


      io = io_calc
      WRITE(jp_stdlog,fmta) '   Calcite             '
      net =   g_c_woflx(io) - g_c_boflx(io)
     &      + g_c_rea(io)
      del =   g_c_xm_1(io) - g_c_xm_0(io)
      ref =  (g_c_xm_1(io) + g_c_xm_0(io))/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_c_woflx(io)
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_c_boflx(io)
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_c_rea(io)
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', (del - net), (del-net)/
     &      ref
      WRITE(jp_stdlog,'()')

      io = io_om
      WRITE(jp_stdlog,fmta) '   OrgMatter           '
      net =   g_c_woflx(io) - g_c_boflx(io)
     &      + g_c_rea(io)
      del =   g_c_xm_1(io) - g_c_xm_0(io)
      ref =  (g_c_xm_1(io) + g_c_xm_0(io))/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_c_woflx(io)
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_c_boflx(io)
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_c_rea(io)
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', (del - net), (del-net)/
     &      ref
      WRITE(jp_stdlog,'()')

      WRITE(jp_stdlog,fmta) '   Sigma solid         '
      net =   g_c_bulk_solid_woflx - g_c_bulk_solid_boflx
     &      + g_c_bulk_solid_rea
      del =   g_c_bulk_solid_xm_1 - g_c_bulk_solid_xm_0
      ref =  (g_c_bulk_solid_xm_1 + g_c_bulk_solid_xm_0)/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_c_bulk_solid_woflx
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_c_bulk_solid_boflx
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_c_bulk_solid_rea
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', del - net, (del-net)/ref
      WRITE(jp_stdlog,'()')


      WRITE(jp_stdlog,fmta) '   Sigma total         '
      net =   g_c_bulk_total_woflx - g_c_bulk_total_boflx
     &      + g_c_bulk_total_rea
      del =   g_c_bulk_total_xm_1 - g_c_bulk_total_xm_0
      ref =  (g_c_bulk_total_xm_1 + g_c_bulk_total_xm_0)/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_c_bulk_total_woflx
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_c_bulk_total_boflx
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_c_bulk_total_rea
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', del - net, (del-net)/ref
      WRITE(jp_stdlog,'()')



      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Oxygen (mol O2 [mol/mol_t])'
      WRITE(jp_stdlog,'()')
      io = io_o2
      WRITE(jp_stdlog,fmta) '   O2                  '
      net =   g_o2_woflx(io) - g_o2_boflx(io)
     &      + g_o2_rea(io)
      del =   g_o2_xm_1(io) - g_o2_xm_0(io)
      ref =  (g_o2_xm_1(io) + g_o2_xm_0(io))/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_o2_woflx(io)
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_o2_boflx(io)
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_o2_rea(io)
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', (del - net), (del-net)/
     &      ref
      WRITE(jp_stdlog,'()')

      io = io_om
      WRITE(jp_stdlog,fmta) '   OrgMatter           '
      net =   g_o2_woflx(io) - g_o2_boflx(io)
     &      + g_o2_rea(io)
      del =   g_o2_xm_1(io) - g_o2_xm_0(io)
      ref =  (g_o2_xm_1(io) + g_o2_xm_0(io))/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_o2_woflx(io)
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_o2_boflx(io)
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_o2_rea(io)
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', (del - net), (del-net)/
     &      ref
      WRITE(jp_stdlog,'()')

      WRITE(jp_stdlog,fmta) '   Sigma total         '
      net =   g_o2_bulk_total_woflx - g_o2_bulk_total_boflx
     &      + g_o2_bulk_total_rea
      del =   g_o2_bulk_total_xm_1 - g_o2_bulk_total_xm_0
      ref =  (g_o2_bulk_total_xm_1 + g_o2_bulk_total_xm_0)/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_o2_bulk_total_woflx
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_o2_bulk_total_boflx
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_o2_bulk_total_rea
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', del - net, (del-net)/ref
      WRITE(jp_stdlog,'()')



      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Phosphate (mol PO4 [mol/mol_t])'
      WRITE(jp_stdlog,'()')
      io = io_o2
      WRITE(jp_stdlog,fmta) '   O2                  '
      net =   g_po4_woflx(io) - g_po4_boflx(io)
     &      + g_po4_rea(io)
      del =   g_po4_xm_1(io) - g_po4_xm_0(io)
      ref =  (g_po4_xm_1(io) + g_po4_xm_0(io))/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_po4_woflx(io)
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_po4_boflx(io)
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_po4_rea(io)
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', (del - net), (del-net)/
     &      ref
      WRITE(jp_stdlog,'()')

      io = io_om
      WRITE(jp_stdlog,fmta) '   OrgMatter           '
      net =   g_po4_woflx(io) - g_po4_boflx(io)
     &      + g_po4_rea(io)
      del =   g_po4_xm_1(io) - g_po4_xm_0(io)
      ref =  (g_po4_xm_1(io) + g_po4_xm_0(io))/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_po4_woflx(io)
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_po4_boflx(io)
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_po4_rea(io)
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', (del - net), (del-net)/
     &      ref
      WRITE(jp_stdlog,'()')

      WRITE(jp_stdlog,fmta) '   Sigma total         '
      net =   g_po4_bulk_total_woflx - g_po4_bulk_total_boflx
     &      + g_po4_bulk_total_rea
      del =   g_po4_bulk_total_xm_1 - g_po4_bulk_total_xm_0
      ref =  (g_po4_bulk_total_xm_1 + g_po4_bulk_total_xm_0)/2D0
      WRITE(jp_stdlog,fmt1) '    Top Flux   ', g_po4_bulk_total_woflx
      WRITE(jp_stdlog,fmt1) '    Bot Flux   ', g_po4_bulk_total_boflx
      WRITE(jp_stdlog,fmt1) '    Total Rea  ', g_po4_bulk_total_rea
      WRITE(jp_stdlog,fmt1) '    Net        ', net
      WRITE(jp_stdlog,fmt1) '    Act Delta  ', del
      WRITE(jp_stdlog,fmt2) '    Diff       ', del - net, (del-net)/ref
      WRITE(jp_stdlog,'()')


! [[CMB_createPrintGlobalInfos]]: End of creation
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_10.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' Global Stocks (t_0, t_1)'
      WRITE(jp_stdlog,fmta) ' ========================'

!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_11.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
! [[CMB_createPrintGlobalInfos]]: Start of creation
! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Alkalinity (eq)'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt3) '   Sigma porew         ',
     &    g_alk_bulk_porew_xm_0, g_alk_bulk_porew_xm_1


      io = io_calc
      WRITE(jp_stdlog,fmt3) '   Calcite             ',
     &    g_alk_xm_0(io), g_alk_xm_1(io)

      io = io_om
      WRITE(jp_stdlog,fmt3) '   OrgMatter           ',
     &    g_alk_xm_0(io), g_alk_xm_1(io)

      WRITE(jp_stdlog,fmt3) '   Sigma solid         ',
     &    g_alk_bulk_solid_xm_0, g_alk_bulk_solid_xm_1


      WRITE(jp_stdlog,fmt3) '   Sigma total         ',
     &    g_alk_bulk_total_xm_0, g_alk_bulk_total_xm_1



      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Carbon (mol C)'
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmt3) '   Sigma porew         ',
     &    g_c_bulk_porew_xm_0, g_c_bulk_porew_xm_1


      io = io_calc
      WRITE(jp_stdlog,fmt3) '   Calcite             ',
     &    g_c_xm_0(io), g_c_xm_1(io)

      io = io_om
      WRITE(jp_stdlog,fmt3) '   OrgMatter           ',
     &    g_c_xm_0(io), g_c_xm_1(io)

      WRITE(jp_stdlog,fmt3) '   Sigma solid         ',
     &    g_c_bulk_solid_xm_0, g_c_bulk_solid_xm_1


      WRITE(jp_stdlog,fmt3) '   Sigma total         ',
     &    g_c_bulk_total_xm_0, g_c_bulk_total_xm_1



      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Oxygen (mol O2)'
      WRITE(jp_stdlog,'()')
      io = io_o2
      WRITE(jp_stdlog,fmt3) '   O2                  ',
     &    g_o2_xm_0(io), g_o2_xm_1(io)

      io = io_om
      WRITE(jp_stdlog,fmt3) '   OrgMatter           ',
     &    g_o2_xm_0(io), g_o2_xm_1(io)

      WRITE(jp_stdlog,fmt3) '   Sigma total         ',
     &    g_o2_bulk_total_xm_0, g_o2_bulk_total_xm_1



      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,'()')
      WRITE(jp_stdlog,fmta) ' * Phosphate (mol PO4)'
      WRITE(jp_stdlog,'()')
      io = io_o2
      WRITE(jp_stdlog,fmt3) '   O2                  ',
     &    g_po4_xm_0(io), g_po4_xm_1(io)

      io = io_om
      WRITE(jp_stdlog,fmt3) '   OrgMatter           ',
     &    g_po4_xm_0(io), g_po4_xm_1(io)

      WRITE(jp_stdlog,fmt3) '   Sigma total         ',
     &    g_po4_bulk_total_xm_0, g_po4_bulk_total_xm_1


! [[CMB_createPrintGlobalInfos]]: End of creation
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_11.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



      CONTAINS

!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Diverting input from "base/mass_balances-base.F"
! to "tmp/mass_balances_contains_1.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
! [[CMB_createSigmaFunctions]]: Start of creation


!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_ALK_BULK_POREW(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_alk_bulk_porew =
     &    array(io_co3)
     &  + array(io_hco3)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_ALK_BULK_POREW
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_ALK_BULK_SOLID(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_alk_bulk_solid =
     &    array(io_calc)
     &  + array(io_om)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_ALK_BULK_SOLID
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_ALK_ORGM_CNP(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_alk_orgm_cnp =
     &    array(io_om)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_ALK_ORGM_CNP
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_C_BULK_POREW(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_c_bulk_porew =
     &    array(io_co3)
     &  + array(io_hco3)
     &  + array(io_co2)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_C_BULK_POREW
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_C_BULK_SOLID(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_c_bulk_solid =
     &    array(io_calc)
     &  + array(io_om)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_C_BULK_SOLID
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_C_ORGM_CNP(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_c_orgm_cnp =
     &    array(io_om)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_C_ORGM_CNP
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_O2_BULK_POREW(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_o2_bulk_porew =
     &    array(io_o2)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_O2_BULK_POREW
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_O2_BULK_SOLID(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_o2_bulk_solid =
     &    array(io_om)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_O2_BULK_SOLID
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_O2_ORGM_CNP(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_o2_orgm_cnp =
     &    array(io_om)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_O2_ORGM_CNP
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_PO4_BULK_POREW(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_po4_bulk_porew =
     &    array(io_o2)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_PO4_BULK_POREW
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_PO4_BULK_SOLID(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_po4_bulk_solid =
     &    array(io_om)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_PO4_BULK_SOLID
!=======================================================================



!=======================================================================
      DOUBLE PRECISION FUNCTION SIGMA_PO4_ORGM_CNP(array)
!=======================================================================

      USE mod_indexparam
      USE mod_materialcharas

      IMPLICIT NONE

      DOUBLE PRECISION, DIMENSION(ncompo), INTENT(IN) :: array




      sigma_po4_orgm_cnp =
     &    array(io_om)


      RETURN

!=======================================================================
      END FUNCTION SIGMA_PO4_ORGM_CNP
!=======================================================================

! [[CMB_createSigmaFunctions]]: End of creation
!<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
! Input from "tmp/mass_balances_contains_1.F" ended.
! Resuming input from "base/mass_balances-base.F"
!>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


!***********************************************************************
      END SUBROUTINE MASS_BALANCES
!***********************************************************************
